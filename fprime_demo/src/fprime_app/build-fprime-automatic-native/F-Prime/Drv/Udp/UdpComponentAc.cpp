// ======================================================================
// \title  UdpComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Udp component base class
// ======================================================================

#include "F-Prime/Drv/Udp/UdpComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Drv {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void UdpComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port send
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_send_InputPorts());
      port++
    ) {
      this->m_send_InputPort[port].init();
      this->m_send_InputPort[port].addCallComp(
        this,
        m_p_send_in
      );
      this->m_send_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_send_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_send_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port allocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_allocate_OutputPorts());
      port++
    ) {
      this->m_allocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_allocate_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_allocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port deallocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_deallocate_OutputPorts());
      port++
    ) {
      this->m_deallocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_deallocate_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_deallocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port ready
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_ready_OutputPorts());
      port++
    ) {
      this->m_ready_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_ready_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_ready_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port recv
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_recv_OutputPorts());
      port++
    ) {
      this->m_recv_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_recv_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_recv_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Drv::InputByteStreamSendPort* UdpComponentBase ::
    get_send_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_send_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_send_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void UdpComponentBase ::
    set_allocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_allocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_allocate_OutputPort[portNum].addCallPort(port);
  }

  void UdpComponentBase ::
    set_deallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_deallocate_OutputPort[portNum].addCallPort(port);
  }

  void UdpComponentBase ::
    set_ready_OutputPort(
        FwIndexType portNum,
        Drv::InputByteStreamReadyPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ready_OutputPort[portNum].addCallPort(port);
  }

  void UdpComponentBase ::
    set_recv_OutputPort(
        FwIndexType portNum,
        Drv::InputByteStreamRecvPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_recv_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void UdpComponentBase ::
    set_deallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_deallocate_OutputPort[portNum].registerSerialPort(port);
  }

  void UdpComponentBase ::
    set_ready_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ready_OutputPort[portNum].registerSerialPort(port);
  }

  void UdpComponentBase ::
    set_recv_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_recv_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  UdpComponentBase ::
    UdpComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  UdpComponentBase ::
    ~UdpComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType UdpComponentBase ::
    getNum_send_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_send_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType UdpComponentBase ::
    getNum_allocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_allocate_OutputPort));
  }

  FwIndexType UdpComponentBase ::
    getNum_deallocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_deallocate_OutputPort));
  }

  FwIndexType UdpComponentBase ::
    getNum_ready_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_ready_OutputPort));
  }

  FwIndexType UdpComponentBase ::
    getNum_recv_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_recv_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool UdpComponentBase ::
    isConnected_allocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_allocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_allocate_OutputPort[portNum].isConnected();
  }

  bool UdpComponentBase ::
    isConnected_deallocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_deallocate_OutputPort[portNum].isConnected();
  }

  bool UdpComponentBase ::
    isConnected_ready_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_ready_OutputPort[portNum].isConnected();
  }

  bool UdpComponentBase ::
    isConnected_recv_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_recv_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  Drv::SendStatus UdpComponentBase ::
    send_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& sendBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_send_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    Drv::SendStatus retVal;

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    retVal = this->send_handler(
      portNum,
      sendBuffer
    );

    // Unlock guard mutex
    this->unLock();

    return retVal;
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  Fw::Buffer UdpComponentBase ::
    allocate_out(
        FwIndexType portNum,
        U32 size
    )
  {
    FW_ASSERT(
      portNum < this->getNum_allocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_allocate_OutputPort[portNum].invoke(
      size
    );
  }

  void UdpComponentBase ::
    deallocate_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_deallocate_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void UdpComponentBase ::
    ready_out(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_ready_OutputPort[portNum].invoke();
  }

  void UdpComponentBase ::
    recv_out(
        FwIndexType portNum,
        Fw::Buffer& recvBuffer,
        const Drv::RecvStatus& recvStatus
    )
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_recv_OutputPort[portNum].invoke(
      recvBuffer,
      recvStatus
    );
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void UdpComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void UdpComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  Drv::SendStatus UdpComponentBase ::
    m_p_send_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& sendBuffer
    )
  {
    FW_ASSERT(callComp);
    UdpComponentBase* compPtr = static_cast<UdpComponentBase*>(callComp);
    return compPtr->send_handlerBase(
      portNum,
      sendBuffer
    );
  }

}
