<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
LinuxGpioDriverComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Drv" name="LinuxGpioDriver" kind="passive">

  <import_enum_type>Os/Models/FileStatusEnumAi.xml</import_enum_type>
  <import_port_type>Drv/Ports/GpioReadPortAi.xml</import_port_type>
  <import_port_type>Drv/Ports/GpioWritePortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Svc/Cycle/CyclePortAi.xml</import_port_type>

  <ports>
    <port name="Log" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1"/>
    <port name="LogText" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1"/>
    <port name="Time" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1"/>
    <port name="gpioInterrupt" data_type="Svc::Cycle" kind="output" max_number="1">
      <comment>
      Port used to indicate transition on the GPIO pin
      </comment>
    </port>
    <port name="gpioRead" data_type="Drv::GpioRead" kind="sync_input" max_number="1">
      <comment>
      Port used to read from a GPIO pin
      </comment>
    </port>
    <port name="gpioWrite" data_type="Drv::GpioWrite" kind="sync_input" max_number="1">
      <comment>
      Port used to write to a GPIO pin
      </comment>
    </port>
  </ports>

  <events>
    <event id="0x0" name="OpenChip" severity="DIAGNOSTIC" format_string="Opened GPIO chip %s[%s] pin %u[%s]">
      <args>
        <arg name="chip" type="string" size="80"/>
        <arg name="chipLabel" type="string" size="80"/>
        <arg name="pin" type="U32"/>
        <arg name="pinMessage" type="string" size="80"/>
      </args>
    </event>
    <event id="0x1" name="OpenChipError" severity="WARNING_HI" format_string="Failed to open GPIO chip %s: %s">
      <args>
        <arg name="chip" type="string" size="80"/>
        <arg name="status" type="Os::FileStatus"/>
      </args>
    </event>
    <event id="0x2" name="OpenPinError" severity="WARNING_HI" format_string="Failed to open GPIO chip %s pin %u [%s]: %s">
      <args>
        <arg name="chip" type="string" size="80"/>
        <arg name="pin" type="U32"/>
        <arg name="pinMessage" type="string" size="80"/>
        <arg name="status" type="Os::FileStatus"/>
      </args>
    </event>
    <event id="0x3" name="InterruptReadError" severity="WARNING_HI" format_string="Interrupt data read expected %u byes and got %u">
      <args>
        <arg name="expected" type="U32"/>
        <arg name="got" type="U32"/>
      </args>
    </event>
    <event id="0x4" name="PollingError" severity="WARNING_HI" format_string="Interrupt polling returned errno: %d">
      <args>
        <arg name="error_number" type="I32"/>
      </args>
    </event>
  </events>

</component>
