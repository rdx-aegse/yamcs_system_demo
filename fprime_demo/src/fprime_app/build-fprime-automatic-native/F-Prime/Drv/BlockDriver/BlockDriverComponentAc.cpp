// ======================================================================
// \title  BlockDriverComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for BlockDriver component base class
// ======================================================================

#include "F-Prime/Drv/BlockDriver/BlockDriverComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Drv {

  namespace {
    enum MsgTypeEnum {
      BLOCKDRIVER_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      BUFFERIN_DATABUFFER,
      PINGIN_PING,
      SCHED_SCHED,
      INT_IF_INTERRUPTREPORT,
    };

    // Get the max size by constructing a union of the async input, command, and
    // internal port serialization sizes
    union BuffUnion {
      BYTE BufferInPortSize[Drv::InputDataBufferPort::SERIALIZED_SIZE];
      BYTE PingInPortSize[Svc::InputPingPort::SERIALIZED_SIZE];
      BYTE SchedPortSize[Svc::InputSchedPort::SERIALIZED_SIZE];
      // Size of InterruptReport argument list
      BYTE InterruptReportIntIfSize[
        sizeof(U32)
      ];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Offset into data in buffer: Size of message ID and port number
          DATA_OFFSET = sizeof(FwEnumStoreType) + sizeof(FwIndexType),
          // Max data size
          MAX_DATA_SIZE = sizeof(BuffUnion),
          // Max message size: Size of message id + size of port + max data size
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    init(
        FwSizeType queueDepth,
        FwEnumStoreType instance
    )
  {
    // Initialize base class
    Fw::ActiveComponentBase::init(instance);

    // Connect input port BufferIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_BufferIn_InputPorts());
      port++
    ) {
      this->m_BufferIn_InputPort[port].init();
      this->m_BufferIn_InputPort[port].addCallComp(
        this,
        m_p_BufferIn_in
      );
      this->m_BufferIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_BufferIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_BufferIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port PingIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_PingIn_InputPorts());
      port++
    ) {
      this->m_PingIn_InputPort[port].init();
      this->m_PingIn_InputPort[port].addCallComp(
        this,
        m_p_PingIn_in
      );
      this->m_PingIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_PingIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_PingIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port Sched
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Sched_InputPorts());
      port++
    ) {
      this->m_Sched_InputPort[port].init();
      this->m_Sched_InputPort[port].addCallComp(
        this,
        m_p_Sched_in
      );
      this->m_Sched_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Sched_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Sched_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Time
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Time_OutputPorts());
      port++
    ) {
      this->m_Time_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Time_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Tlm
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Tlm_OutputPorts());
      port++
    ) {
      this->m_Tlm_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Tlm_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port BufferOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_BufferOut_OutputPorts());
      port++
    ) {
      this->m_BufferOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_BufferOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_BufferOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port CycleOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CycleOut_OutputPorts());
      port++
    ) {
      this->m_CycleOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CycleOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CycleOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port PingOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_PingOut_OutputPorts());
      port++
    ) {
      this->m_PingOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_PingOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_PingOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Create the queue
    Os::Queue::Status qStat = this->createQueue(
      queueDepth,
      static_cast<FwSizeType>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE)
    );
    FW_ASSERT(
      Os::Queue::Status::OP_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Drv::InputDataBufferPort* BlockDriverComponentBase ::
    get_BufferIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_BufferIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_BufferIn_InputPort[portNum];
  }

  Svc::InputPingPort* BlockDriverComponentBase ::
    get_PingIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_PingIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_PingIn_InputPort[portNum];
  }

  Svc::InputSchedPort* BlockDriverComponentBase ::
    get_Sched_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Sched_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_Sched_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].addCallPort(port);
  }

  void BlockDriverComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Tlm_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    set_BufferOut_OutputPort(
        FwIndexType portNum,
        Drv::InputDataBufferPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_BufferOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_BufferOut_OutputPort[portNum].addCallPort(port);
  }

  void BlockDriverComponentBase ::
    set_CycleOut_OutputPort(
        FwIndexType portNum,
        Svc::InputCyclePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CycleOut_OutputPort[portNum].addCallPort(port);
  }

  void BlockDriverComponentBase ::
    set_PingOut_OutputPort(
        FwIndexType portNum,
        Svc::InputPingPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_PingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_PingOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].registerSerialPort(port);
  }

  void BlockDriverComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Tlm_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    set_BufferOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_BufferOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_BufferOut_OutputPort[portNum].registerSerialPort(port);
  }

  void BlockDriverComponentBase ::
    set_CycleOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CycleOut_OutputPort[portNum].registerSerialPort(port);
  }

  void BlockDriverComponentBase ::
    set_PingOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_PingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_PingOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  BlockDriverComponentBase ::
    BlockDriverComponentBase(const char* compName) :
      Fw::ActiveComponentBase(compName)
  {

  }

  BlockDriverComponentBase ::
    ~BlockDriverComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType BlockDriverComponentBase ::
    getNum_BufferIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_BufferIn_InputPort));
  }

  FwIndexType BlockDriverComponentBase ::
    getNum_PingIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_PingIn_InputPort));
  }

  FwIndexType BlockDriverComponentBase ::
    getNum_Sched_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Sched_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType BlockDriverComponentBase ::
    getNum_Time_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Time_OutputPort));
  }

  FwIndexType BlockDriverComponentBase ::
    getNum_Tlm_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Tlm_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType BlockDriverComponentBase ::
    getNum_BufferOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_BufferOut_OutputPort));
  }

  FwIndexType BlockDriverComponentBase ::
    getNum_CycleOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CycleOut_OutputPort));
  }

  FwIndexType BlockDriverComponentBase ::
    getNum_PingOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_PingOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool BlockDriverComponentBase ::
    isConnected_Time_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Time_OutputPort[portNum].isConnected();
  }

  bool BlockDriverComponentBase ::
    isConnected_Tlm_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Tlm_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Tlm_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool BlockDriverComponentBase ::
    isConnected_BufferOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_BufferOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_BufferOut_OutputPort[portNum].isConnected();
  }

  bool BlockDriverComponentBase ::
    isConnected_CycleOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CycleOut_OutputPort[portNum].isConnected();
  }

  bool BlockDriverComponentBase ::
    isConnected_PingOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_PingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_PingOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    BufferIn_handlerBase(
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_BufferIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    BufferIn_preMsgHook(
      portNum,
      buff
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(BUFFERIN_DATABUFFER)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument buff
    _status = msg.serialize(buff);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void BlockDriverComponentBase ::
    PingIn_handlerBase(
        FwIndexType portNum,
        U32 key
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_PingIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    PingIn_preMsgHook(
      portNum,
      key
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(PINGIN_PING)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument key
    _status = msg.serialize(key);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void BlockDriverComponentBase ::
    Sched_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_Sched_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    Sched_preMsgHook(
      portNum,
      context
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(SCHED_SCHED)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument context
    _status = msg.serialize(context);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for typed async input ports
  //
  // Each of these functions is invoked just before processing a message
  // on the corresponding port. By default, they do nothing. You can
  // override them to provide specific pre-message behavior.
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    BufferIn_preMsgHook(
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    // Default: no-op
  }

  void BlockDriverComponentBase ::
    PingIn_preMsgHook(
        FwIndexType portNum,
        U32 key
    )
  {
    // Default: no-op
  }

  void BlockDriverComponentBase ::
    Sched_preMsgHook(
        FwIndexType portNum,
        U32 context
    )
  {
    // Default: no-op
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    BufferOut_out(
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    FW_ASSERT(
      portNum < this->getNum_BufferOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_BufferOut_OutputPort[portNum].invoke(
      buff
    );
  }

  void BlockDriverComponentBase ::
    CycleOut_out(
        FwIndexType portNum,
        Os::RawTime& cycleStart
    )
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_CycleOut_OutputPort[portNum].invoke(
      cycleStart
    );
  }

  void BlockDriverComponentBase ::
    PingOut_out(
        FwIndexType portNum,
        U32 key
    )
  {
    FW_ASSERT(
      portNum < this->getNum_PingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_PingOut_OutputPort[portNum].invoke(
      key
    );
  }

  // ----------------------------------------------------------------------
  // Internal interface base-class functions
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    InterruptReport_internalInterfaceInvoke(U32 interrupt)
  {
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize the message ID
    _status = msg.serialize(static_cast<FwEnumStoreType>(INT_IF_INTERRUPTREPORT));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    _status = msg.serialize(static_cast<FwIndexType>(0));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serialize(interrupt);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 1, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    tlmWrite_BD_Cycles(
        U32 arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_BD_CYCLES;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time BlockDriverComponentBase ::
    getTime()
  {
    if (this->m_Time_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_Time_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus BlockDriverComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer msg;
    FwQueuePriorityType priority = 0;

    Os::Queue::Status msgStatus = this->m_queue.receive(
      msg,
      Os::Queue::BLOCKING,
      priority
    );
    FW_ASSERT(
      msgStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(msgStatus)
    );

    // Reset to beginning of buffer
    msg.resetDeser();

    FwEnumStoreType desMsg = 0;
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == BLOCKDRIVER_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
    deserStatus = msg.deserialize(portNum);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    switch (msgType) {
      // Handle async input port BufferIn
      case BUFFERIN_DATABUFFER: {
        // Deserialize argument buff
        Drv::DataBuffer buff;
        deserStatus = msg.deserialize(buff);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->BufferIn_handler(
          portNum,
          buff
        );

        break;
      }

      // Handle async input port PingIn
      case PINGIN_PING: {
        // Deserialize argument key
        U32 key;
        deserStatus = msg.deserialize(key);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->PingIn_handler(
          portNum,
          key
        );

        break;
      }

      // Handle async input port Sched
      case SCHED_SCHED: {
        // Deserialize argument context
        U32 context;
        deserStatus = msg.deserialize(context);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->Sched_handler(
          portNum,
          context
        );

        break;
      }

      // Handle internal interface InterruptReport
      case INT_IF_INTERRUPTREPORT: {
        U32 interrupt;
        deserStatus = msg.deserialize(interrupt);

        // Internal interface should always deserialize
        FW_ASSERT(
          Fw::FW_SERIALIZE_OK == deserStatus,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Make sure there was no data left over.
        // That means the buffer size was incorrect.
        FW_ASSERT(
          msg.getBuffLeft() == 0,
          static_cast<FwAssertArgType>(msg.getBuffLeft())
        );

        // Call handler function
        this->InterruptReport_internalInterfaceHandler(
          interrupt
        );

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void BlockDriverComponentBase ::
    m_p_BufferIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    FW_ASSERT(callComp);
    BlockDriverComponentBase* compPtr = static_cast<BlockDriverComponentBase*>(callComp);
    compPtr->BufferIn_handlerBase(
      portNum,
      buff
    );
  }

  void BlockDriverComponentBase ::
    m_p_PingIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 key
    )
  {
    FW_ASSERT(callComp);
    BlockDriverComponentBase* compPtr = static_cast<BlockDriverComponentBase*>(callComp);
    compPtr->PingIn_handlerBase(
      portNum,
      key
    );
  }

  void BlockDriverComponentBase ::
    m_p_Sched_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    BlockDriverComponentBase* compPtr = static_cast<BlockDriverComponentBase*>(callComp);
    compPtr->Sched_handlerBase(
      portNum,
      context
    );
  }

}
