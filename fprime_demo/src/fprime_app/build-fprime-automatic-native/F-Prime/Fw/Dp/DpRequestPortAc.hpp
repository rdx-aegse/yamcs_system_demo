// ======================================================================
// \title  DpRequestPortAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpRequest port
// ======================================================================

#ifndef Fw_DpRequestPortAc_HPP
#define Fw_DpRequestPortAc_HPP

#include <cstdio>
#include <cstring>

#include "FpConfig.hpp"
#include "Fw/Comp/PassiveComponentBase.hpp"
#include "Fw/Port/InputPortBase.hpp"
#include "Fw/Port/OutputPortBase.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/StringType.hpp"

namespace Fw {

  //! Input DpRequest port
  //! Port for sending a request for a data product buffer to
  //! back a data product container. The request is for a buffer
  //! large enough to hold a data product packet with the requested
  //! data size.
  class InputDpRequestPort :
    public Fw::InputPortBase
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representations of the port arguments
        SERIALIZED_SIZE =
          sizeof(FwDpIdType) +
          sizeof(FwSizeType)
      };

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The port callback function type
      typedef void (*CompFuncPtr)(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize
      );

    public:

      // ----------------------------------------------------------------------
      // Input Port Member functions
      // ----------------------------------------------------------------------

      //! Constructor
      InputDpRequestPort();

      //! Initialization function
      void init();

      //! Register a component
      void addCallComp(
          Fw::PassiveComponentBase* callComp, //!< The containing component
          CompFuncPtr funcPtr //!< The port callback function
      );

      //! Invoke a port interface
      void invoke(
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      );

    private:

#if FW_PORT_SERIALIZATION == 1

      //! Invoke the port with serialized arguments
      Fw::SerializeStatus invokeSerial(Fw::SerializeBufferBase& _buffer);

#endif

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The pointer to the port callback function
      CompFuncPtr m_func;

  };

  //! Output DpRequest port
  //! Port for sending a request for a data product buffer to
  //! back a data product container. The request is for a buffer
  //! large enough to hold a data product packet with the requested
  //! data size.
  class OutputDpRequestPort :
    public Fw::OutputPortBase
  {

    public:

      // ----------------------------------------------------------------------
      // Output Port Member functions
      // ----------------------------------------------------------------------

      //! Constructor
      OutputDpRequestPort();

      //! Initialization function
      void init();

      //! Register an input port
      void addCallPort(
          InputDpRequestPort* callPort //!< The input port
      );

      //! Invoke a port interface
      void invoke(
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      ) const;

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The pointer to the input port
      InputDpRequestPort* m_port;

  };

}

#endif
