// ======================================================================
// \title  DpManagerComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpManager component base class
// ======================================================================

#ifndef Svc_DpManagerComponentAc_HPP
#define Svc_DpManagerComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Buffer/BufferGetPortAc.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Dp/DpGetPortAc.hpp"
#include "Fw/Dp/DpRequestPortAc.hpp"
#include "Fw/Dp/DpResponsePortAc.hpp"
#include "Fw/Dp/DpSendPortAc.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Svc/Sched/SchedPortAc.hpp"

namespace Svc {

  //! \class DpManagerComponentBase
  //! \brief Auto-generated base for DpManager component
  //!
  //! A component for managing data products
  class DpManagerComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class DpManagerComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_PRODUCTGETIN_INPUT_PORTS = 5,
        NUM_PRODUCTREQUESTIN_INPUT_PORTS = 5,
        NUM_PRODUCTSENDIN_INPUT_PORTS = 5,
        NUM_SCHEDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGIN_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_EVENTOUT_OUTPUT_PORTS = 1,
        NUM_TEXTEVENTOUT_OUTPUT_PORTS = 1,
        NUM_TIMEGETOUT_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_BUFFERGETOUT_OUTPUT_PORTS = 5,
        NUM_PRODUCTRESPONSEOUT_OUTPUT_PORTS = 5,
        NUM_PRODUCTSENDOUT_OUTPUT_PORTS = 5,
      };

      //! Command opcodes
      enum {
        OPCODE_CLEAR_EVENT_THROTTLE = 0x0, //!< Clear event throttling
      };

      //! Event IDs
      enum {
        EVENTID_BUFFERALLOCATIONFAILED = 0x0, //!< Buffer allocation failed
      };

      //! Event throttle values: sets initial value of countdown variables
      enum {
        EVENTID_BUFFERALLOCATIONFAILED_THROTTLE = 10, //!< Throttle reset count for BufferAllocationFailed
      };

      //! Channel IDs
      enum {
        CHANNELID_NUMSUCCESSFULALLOCATIONS = 0x0, //!< Channel ID for NumSuccessfulAllocations
        CHANNELID_NUMFAILEDALLOCATIONS = 0x1, //!< Channel ID for NumFailedAllocations
        CHANNELID_NUMDATAPRODUCTS = 0x2, //!< Channel ID for NumDataProducts
        CHANNELID_NUMBYTES = 0x3, //!< Channel ID for NumBytes
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize DpManagerComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return productGetIn[portNum]
      Fw::InputDpGetPort* get_productGetIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return productRequestIn[portNum]
      Fw::InputDpRequestPort* get_productRequestIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return productSendIn[portNum]
      Fw::InputDpSendPort* get_productSendIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return schedIn[portNum]
      Svc::InputSchedPort* get_schedIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegIn[portNum]
      void set_cmdRegIn_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to eventOut[portNum]
      void set_eventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to textEventOut[portNum]
      void set_textEventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to timeGetOut[portNum]
      void set_timeGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to bufferGetOut[portNum]
      void set_bufferGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferGetPort* port //!< The input port
      );

      //! Connect port to productResponseOut[portNum]
      void set_productResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpResponsePort* port //!< The input port
      );

      //! Connect port to productSendOut[portNum]
      void set_productSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegIn[portNum]
      void set_cmdRegIn_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to eventOut[portNum]
      void set_eventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to textEventOut[portNum]
      void set_textEventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to timeGetOut[portNum]
      void set_timeGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to productResponseOut[portNum]
      void set_productResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to productSendOut[portNum]
      void set_productSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct DpManagerComponentBase object
      DpManagerComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy DpManagerComponentBase object
      virtual ~DpManagerComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      FwIndexType getNum_cmdIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of productGetIn input ports
      //!
      //! \return The number of productGetIn input ports
      FwIndexType getNum_productGetIn_InputPorts() const;

      //! Get the number of productRequestIn input ports
      //!
      //! \return The number of productRequestIn input ports
      FwIndexType getNum_productRequestIn_InputPorts() const;

      //! Get the number of productSendIn input ports
      //!
      //! \return The number of productSendIn input ports
      FwIndexType getNum_productSendIn_InputPorts() const;

      //! Get the number of schedIn input ports
      //!
      //! \return The number of schedIn input ports
      FwIndexType getNum_schedIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegIn output ports
      //!
      //! \return The number of cmdRegIn output ports
      FwIndexType getNum_cmdRegIn_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      FwIndexType getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of eventOut output ports
      //!
      //! \return The number of eventOut output ports
      FwIndexType getNum_eventOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of textEventOut output ports
      //!
      //! \return The number of textEventOut output ports
      FwIndexType getNum_textEventOut_OutputPorts() const;

#endif

      //! Get the number of timeGetOut output ports
      //!
      //! \return The number of timeGetOut output ports
      FwIndexType getNum_timeGetOut_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      FwIndexType getNum_tlmOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of bufferGetOut output ports
      //!
      //! \return The number of bufferGetOut output ports
      FwIndexType getNum_bufferGetOut_OutputPorts() const;

      //! Get the number of productResponseOut output ports
      //!
      //! \return The number of productResponseOut output ports
      FwIndexType getNum_productResponseOut_OutputPorts() const;

      //! Get the number of productSendOut output ports
      //!
      //! \return The number of productSendOut output ports
      FwIndexType getNum_productSendOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegIn is connected
      //!
      //! \return Whether port cmdRegIn is connected
      bool isConnected_cmdRegIn_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port eventOut is connected
      //!
      //! \return Whether port eventOut is connected
      bool isConnected_eventOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port textEventOut is connected
      //!
      //! \return Whether port textEventOut is connected
      bool isConnected_textEventOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port timeGetOut is connected
      //!
      //! \return Whether port timeGetOut is connected
      bool isConnected_timeGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port bufferGetOut is connected
      //!
      //! \return Whether port bufferGetOut is connected
      bool isConnected_bufferGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productResponseOut is connected
      //!
      //! \return Whether port productResponseOut is connected
      bool isConnected_productResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productSendOut is connected
      //!
      //! \return Whether port productSendOut is connected
      bool isConnected_productSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port productGetIn
      virtual Fw::Success productGetIn_handler(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID (input)
          FwSizeType dataSize, //!< The data size of the requested buffer (input)
          Fw::Buffer& buffer //!< The buffer (output)
      ) = 0;

      //! Handler for input port productRequestIn
      virtual void productRequestIn_handler(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      ) = 0;

      //! Handler for input port productSendIn
      virtual void productSendIn_handler(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer //!< The buffer
      ) = 0;

      //! Handler for input port schedIn
      virtual void schedIn_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port productGetIn
      Fw::Success productGetIn_handlerBase(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID (input)
          FwSizeType dataSize, //!< The data size of the requested buffer (input)
          Fw::Buffer& buffer //!< The buffer (output)
      );

      //! Handler base-class function for input port productRequestIn
      void productRequestIn_handlerBase(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      );

      //! Handler base-class function for input port productSendIn
      void productSendIn_handlerBase(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer //!< The buffer
      );

      //! Handler base-class function for input port schedIn
      void schedIn_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for typed async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port productRequestIn
      virtual void productRequestIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      );

      //! Pre-message hook for async input port productSendIn
      virtual void productSendIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer //!< The buffer
      );

      //! Pre-message hook for async input port schedIn
      virtual void schedIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port bufferGetOut
      Fw::Buffer bufferGetOut_out(
          FwIndexType portNum, //!< The port number
          U32 size //!< The requested size
      );

      //! Invoke output port productResponseOut
      void productResponseOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

      //! Invoke output port productSendOut
      void productSendOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command CLEAR_EVENT_THROTTLE
      //!
      //! Clear event throttling
      virtual void CLEAR_EVENT_THROTTLE_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command CLEAR_EVENT_THROTTLE
      //!
      //! Clear event throttling
      void CLEAR_EVENT_THROTTLE_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for async commands
      //
      // Each of these functions is invoked just before processing the
      // corresponding command. By default they do nothing. You can
      // override them to provide specific pre-command behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for command CLEAR_EVENT_THROTTLE
      virtual void CLEAR_EVENT_THROTTLE_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event BufferAllocationFailed
      //!
      //! Buffer allocation failed
      void log_WARNING_HI_BufferAllocationFailed(
          U32 id //!< The container ID
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event throttle reset functions
      // ----------------------------------------------------------------------

      //! Reset throttle value for BufferAllocationFailed
      void log_WARNING_HI_BufferAllocationFailed_ThrottleClear();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel NumSuccessfulAllocations
      //!
      //! The number of successful buffer allocations
      void tlmWrite_NumSuccessfulAllocations(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumFailedAllocations
      //!
      //! The number of failed buffer allocations
      void tlmWrite_NumFailedAllocations(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumDataProducts
      //!
      //! Number of data products handled
      void tlmWrite_NumDataProducts(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumBytes
      //!
      //! Number of bytes handled
      void tlmWrite_NumBytes(
          U64 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port productGetIn
      static Fw::Success m_p_productGetIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID (input)
          FwSizeType dataSize, //!< The data size of the requested buffer (input)
          Fw::Buffer& buffer //!< The buffer (output)
      );

      //! Callback for port productRequestIn
      static void m_p_productRequestIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      );

      //! Callback for port productSendIn
      static void m_p_productSendIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer //!< The buffer
      );

      //! Callback for port schedIn
      static void m_p_schedIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port productGetIn
      Fw::InputDpGetPort m_productGetIn_InputPort[NUM_PRODUCTGETIN_INPUT_PORTS];

      //! Input port productRequestIn
      Fw::InputDpRequestPort m_productRequestIn_InputPort[NUM_PRODUCTREQUESTIN_INPUT_PORTS];

      //! Input port productSendIn
      Fw::InputDpSendPort m_productSendIn_InputPort[NUM_PRODUCTSENDIN_INPUT_PORTS];

      //! Input port schedIn
      Svc::InputSchedPort m_schedIn_InputPort[NUM_SCHEDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegIn
      Fw::OutputCmdRegPort m_cmdRegIn_OutputPort[NUM_CMDREGIN_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port eventOut
      Fw::OutputLogPort m_eventOut_OutputPort[NUM_EVENTOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port textEventOut
      Fw::OutputLogTextPort m_textEventOut_OutputPort[NUM_TEXTEVENTOUT_OUTPUT_PORTS];

#endif

      //! Output port timeGetOut
      Fw::OutputTimePort m_timeGetOut_OutputPort[NUM_TIMEGETOUT_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port bufferGetOut
      Fw::OutputBufferGetPort m_bufferGetOut_OutputPort[NUM_BUFFERGETOUT_OUTPUT_PORTS];

      //! Output port productResponseOut
      Fw::OutputDpResponsePort m_productResponseOut_OutputPort[NUM_PRODUCTRESPONSEOUT_OUTPUT_PORTS];

      //! Output port productSendOut
      Fw::OutputBufferSendPort m_productSendOut_OutputPort[NUM_PRODUCTSENDOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Counter values for event throttling
      // ----------------------------------------------------------------------

      //! Throttle for BufferAllocationFailed
      FwIndexType m_BufferAllocationFailedThrottle;

    PRIVATE:

      // ----------------------------------------------------------------------
      // First update flags for telemetry channels
      // ----------------------------------------------------------------------

      //! Initialized to true; cleared when channel NumSuccessfulAllocations is first updated
      bool m_first_update_NumSuccessfulAllocations;

      //! Initialized to true; cleared when channel NumFailedAllocations is first updated
      bool m_first_update_NumFailedAllocations;

      //! Initialized to true; cleared when channel NumDataProducts is first updated
      bool m_first_update_NumDataProducts;

      //! Initialized to true; cleared when channel NumBytes is first updated
      bool m_first_update_NumBytes;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Last value storage for telemetry channels
      // ----------------------------------------------------------------------

      //! Records the last emitted value for channel NumSuccessfulAllocations
      U32 m_last_NumSuccessfulAllocations;

      //! Records the last emitted value for channel NumFailedAllocations
      U32 m_last_NumFailedAllocations;

      //! Records the last emitted value for channel NumDataProducts
      U32 m_last_NumDataProducts;

      //! Records the last emitted value for channel NumBytes
      U64 m_last_NumBytes;

  };

}

#endif
