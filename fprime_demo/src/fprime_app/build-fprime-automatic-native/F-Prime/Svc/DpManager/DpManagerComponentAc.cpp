// ======================================================================
// \title  DpManagerComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpManager component base class
// ======================================================================

#include "F-Prime/Svc/DpManager/DpManagerComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  namespace {
    enum MsgTypeEnum {
      DPMANAGER_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      PRODUCTREQUESTIN_DPREQUEST,
      PRODUCTSENDIN_DPSEND,
      SCHEDIN_SCHED,
      CMD_CLEAR_EVENT_THROTTLE,
    };

    // Get the max size by constructing a union of the async input, command, and
    // internal port serialization sizes
    union BuffUnion {
      BYTE productRequestInPortSize[Fw::InputDpRequestPort::SERIALIZED_SIZE];
      BYTE productSendInPortSize[Fw::InputDpSendPort::SERIALIZED_SIZE];
      BYTE schedInPortSize[Svc::InputSchedPort::SERIALIZED_SIZE];
      BYTE cmdPortSize[Fw::InputCmdPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Offset into data in buffer: Size of message ID and port number
          DATA_OFFSET = sizeof(FwEnumStoreType) + sizeof(FwIndexType),
          // Max data size
          MAX_DATA_SIZE = sizeof(BuffUnion),
          // Max message size: Size of message id + size of port + max data size
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    init(
        FwSizeType queueDepth,
        FwEnumStoreType instance
    )
  {
    // Initialize base class
    Fw::ActiveComponentBase::init(instance);

    // Connect input port cmdIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdIn_InputPorts());
      port++
    ) {
      this->m_cmdIn_InputPort[port].init();
      this->m_cmdIn_InputPort[port].addCallComp(
        this,
        m_p_cmdIn_in
      );
      this->m_cmdIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port productGetIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productGetIn_InputPorts());
      port++
    ) {
      this->m_productGetIn_InputPort[port].init();
      this->m_productGetIn_InputPort[port].addCallComp(
        this,
        m_p_productGetIn_in
      );
      this->m_productGetIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productGetIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productGetIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port productRequestIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productRequestIn_InputPorts());
      port++
    ) {
      this->m_productRequestIn_InputPort[port].init();
      this->m_productRequestIn_InputPort[port].addCallComp(
        this,
        m_p_productRequestIn_in
      );
      this->m_productRequestIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productRequestIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productRequestIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port productSendIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productSendIn_InputPorts());
      port++
    ) {
      this->m_productSendIn_InputPort[port].init();
      this->m_productSendIn_InputPort[port].addCallComp(
        this,
        m_p_productSendIn_in
      );
      this->m_productSendIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productSendIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productSendIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port schedIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_schedIn_InputPorts());
      port++
    ) {
      this->m_schedIn_InputPort[port].init();
      this->m_schedIn_InputPort[port].addCallComp(
        this,
        m_p_schedIn_in
      );
      this->m_schedIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_schedIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdRegIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdRegIn_OutputPorts());
      port++
    ) {
      this->m_cmdRegIn_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdRegIn_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdRegIn_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdResponseOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdResponseOut_OutputPorts());
      port++
    ) {
      this->m_cmdResponseOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdResponseOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port eventOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_eventOut_OutputPorts());
      port++
    ) {
      this->m_eventOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_eventOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_eventOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port textEventOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_textEventOut_OutputPorts());
      port++
    ) {
      this->m_textEventOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_textEventOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_textEventOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port timeGetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeGetOut_OutputPorts());
      port++
    ) {
      this->m_timeGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeGetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeGetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port tlmOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_tlmOut_OutputPorts());
      port++
    ) {
      this->m_tlmOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_tlmOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_tlmOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port bufferGetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferGetOut_OutputPorts());
      port++
    ) {
      this->m_bufferGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferGetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferGetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port productResponseOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productResponseOut_OutputPorts());
      port++
    ) {
      this->m_productResponseOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productResponseOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productResponseOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port productSendOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productSendOut_OutputPorts());
      port++
    ) {
      this->m_productSendOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productSendOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productSendOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Create the queue
    Os::Queue::Status qStat = this->createQueue(
      queueDepth,
      static_cast<FwSizeType>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE)
    );
    FW_ASSERT(
      Os::Queue::Status::OP_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* DpManagerComponentBase ::
    get_cmdIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_cmdIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputDpGetPort* DpManagerComponentBase ::
    get_productGetIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_productGetIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_productGetIn_InputPort[portNum];
  }

  Fw::InputDpRequestPort* DpManagerComponentBase ::
    get_productRequestIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_productRequestIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_productRequestIn_InputPort[portNum];
  }

  Fw::InputDpSendPort* DpManagerComponentBase ::
    get_productSendIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_productSendIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_productSendIn_InputPort[portNum];
  }

  Svc::InputSchedPort* DpManagerComponentBase ::
    get_schedIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_schedIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_schedIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    set_cmdRegIn_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegIn_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegIn_OutputPort[portNum].addCallPort(port);
  }

  void DpManagerComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
  }

  void DpManagerComponentBase ::
    set_eventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_eventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_eventOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void DpManagerComponentBase ::
    set_textEventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_textEventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_textEventOut_OutputPort[portNum].addCallPort(port);
  }

#endif

  void DpManagerComponentBase ::
    set_timeGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeGetOut_OutputPort[portNum].addCallPort(port);
  }

  void DpManagerComponentBase ::
    set_tlmOut_OutputPort(
        FwIndexType portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_tlmOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    set_bufferGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_bufferGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferGetOut_OutputPort[portNum].addCallPort(port);
  }

  void DpManagerComponentBase ::
    set_productResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputDpResponsePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_productResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productResponseOut_OutputPort[portNum].addCallPort(port);
  }

  void DpManagerComponentBase ::
    set_productSendOut_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_productSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productSendOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    set_cmdRegIn_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegIn_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegIn_OutputPort[portNum].registerSerialPort(port);
  }

  void DpManagerComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpManagerComponentBase ::
    set_eventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_eventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_eventOut_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void DpManagerComponentBase ::
    set_textEventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_textEventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_textEventOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void DpManagerComponentBase ::
    set_timeGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeGetOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpManagerComponentBase ::
    set_tlmOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_tlmOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_tlmOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    set_productResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_productResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productResponseOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpManagerComponentBase ::
    set_productSendOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_productSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productSendOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    regCommands()
  {
    FW_ASSERT(this->m_cmdRegIn_OutputPort[0].isConnected());

    this->m_cmdRegIn_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CLEAR_EVENT_THROTTLE
    );
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  DpManagerComponentBase ::
    DpManagerComponentBase(const char* compName) :
      Fw::ActiveComponentBase(compName)
  {
    // Write telemetry channel NumSuccessfulAllocations
    this->m_first_update_NumSuccessfulAllocations = true;
    this->m_last_NumSuccessfulAllocations = 0;

    // Write telemetry channel NumFailedAllocations
    this->m_first_update_NumFailedAllocations = true;
    this->m_last_NumFailedAllocations = 0;

    // Write telemetry channel NumDataProducts
    this->m_first_update_NumDataProducts = true;
    this->m_last_NumDataProducts = 0;

    // Write telemetry channel NumBytes
    this->m_first_update_NumBytes = true;
    this->m_last_NumBytes = 0;

    this->m_BufferAllocationFailedThrottle = 0;
  }

  DpManagerComponentBase ::
    ~DpManagerComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  FwIndexType DpManagerComponentBase ::
    getNum_cmdIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType DpManagerComponentBase ::
    getNum_productGetIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productGetIn_InputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_productRequestIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productRequestIn_InputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_productSendIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productSendIn_InputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_schedIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_schedIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType DpManagerComponentBase ::
    getNum_cmdRegIn_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdRegIn_OutputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_cmdResponseOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdResponseOut_OutputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_eventOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_eventOut_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType DpManagerComponentBase ::
    getNum_textEventOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_textEventOut_OutputPort));
  }

#endif

  FwIndexType DpManagerComponentBase ::
    getNum_timeGetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeGetOut_OutputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_tlmOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_tlmOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType DpManagerComponentBase ::
    getNum_bufferGetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferGetOut_OutputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_productResponseOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productResponseOut_OutputPort));
  }

  FwIndexType DpManagerComponentBase ::
    getNum_productSendOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productSendOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool DpManagerComponentBase ::
    isConnected_cmdRegIn_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegIn_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdRegIn_OutputPort[portNum].isConnected();
  }

  bool DpManagerComponentBase ::
    isConnected_cmdResponseOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdResponseOut_OutputPort[portNum].isConnected();
  }

  bool DpManagerComponentBase ::
    isConnected_eventOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_eventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_eventOut_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool DpManagerComponentBase ::
    isConnected_textEventOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_textEventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_textEventOut_OutputPort[portNum].isConnected();
  }

#endif

  bool DpManagerComponentBase ::
    isConnected_timeGetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_timeGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeGetOut_OutputPort[portNum].isConnected();
  }

  bool DpManagerComponentBase ::
    isConnected_tlmOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_tlmOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_tlmOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool DpManagerComponentBase ::
    isConnected_bufferGetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_bufferGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_bufferGetOut_OutputPort[portNum].isConnected();
  }

  bool DpManagerComponentBase ::
    isConnected_productResponseOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_productResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_productResponseOut_OutputPort[portNum].isConnected();
  }

  bool DpManagerComponentBase ::
    isConnected_productSendOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_productSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_productSendOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  Fw::Success DpManagerComponentBase ::
    productGetIn_handlerBase(
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize,
        Fw::Buffer& buffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_productGetIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    Fw::Success retVal;

    // Call handler function
    retVal = this->productGetIn_handler(
      portNum,
      id,
      dataSize,
      buffer
    );

    return retVal;
  }

  void DpManagerComponentBase ::
    productRequestIn_handlerBase(
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_productRequestIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    productRequestIn_preMsgHook(
      portNum,
      id,
      dataSize
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(PRODUCTREQUESTIN_DPREQUEST)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument id
    _status = msg.serialize(id);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument dataSize
    _status = msg.serialize(dataSize);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void DpManagerComponentBase ::
    productSendIn_handlerBase(
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_productSendIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    productSendIn_preMsgHook(
      portNum,
      id,
      buffer
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(PRODUCTSENDIN_DPSEND)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument id
    _status = msg.serialize(id);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument buffer
    _status = msg.serialize(buffer);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void DpManagerComponentBase ::
    schedIn_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_schedIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    schedIn_preMsgHook(
      portNum,
      context
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(SCHEDIN_SCHED)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument context
    _status = msg.serialize(context);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for typed async input ports
  //
  // Each of these functions is invoked just before processing a message
  // on the corresponding port. By default, they do nothing. You can
  // override them to provide specific pre-message behavior.
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    productRequestIn_preMsgHook(
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize
    )
  {
    // Default: no-op
  }

  void DpManagerComponentBase ::
    productSendIn_preMsgHook(
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer
    )
  {
    // Default: no-op
  }

  void DpManagerComponentBase ::
    schedIn_preMsgHook(
        FwIndexType portNum,
        U32 context
    )
  {
    // Default: no-op
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  Fw::Buffer DpManagerComponentBase ::
    bufferGetOut_out(
        FwIndexType portNum,
        U32 size
    )
  {
    FW_ASSERT(
      portNum < this->getNum_bufferGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_bufferGetOut_OutputPort[portNum].invoke(
      size
    );
  }

  void DpManagerComponentBase ::
    productResponseOut_out(
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer,
        const Fw::Success& status
    )
  {
    FW_ASSERT(
      portNum < this->getNum_productResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_productResponseOut_OutputPort[portNum].invoke(
      id,
      buffer,
      status
    );
  }

  void DpManagerComponentBase ::
    productSendOut_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_productSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_productSendOut_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  // ----------------------------------------------------------------------
  // Command response
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdResponse response
    )
  {
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
  }

  // ----------------------------------------------------------------------
  // Command handler base-class functions
  //
  // Call these functions directly to bypass the command input port
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    CLEAR_EVENT_THROTTLE_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Call pre-message hook
    this->CLEAR_EVENT_THROTTLE_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CLEAR_EVENT_THROTTLE));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    FwIndexType port = 0;

    _status = msg.serialize(port);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serialize(opCode);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serialize(cmdSeq);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serialize(args);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for async commands
  //
  // Each of these functions is invoked just before processing the
  // corresponding command. By default they do nothing. You can
  // override them to provide specific pre-command behavior.
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    CLEAR_EVENT_THROTTLE_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    log_WARNING_HI_BufferAllocationFailed(U32 id)
  {
    // Check throttle value
    if (this->m_BufferAllocationFailedThrottle >= EVENTID_BUFFERALLOCATIONFAILED_THROTTLE) {
      return;
    }
    else {
      this->m_BufferAllocationFailedThrottle++;
    }

    // Get the time
    Fw::Time _logTime;
    if (this->m_timeGetOut_OutputPort[0].isConnected()) {
      this->m_timeGetOut_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_BUFFERALLOCATIONFAILED;

    // Emit the event on the log port
    if (this->m_eventOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_eventOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_textEventOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Buffer allocation failed for container id %" PRIu32 "";
#else
      const char* _formatString =
        "%s: Buffer allocation failed for container id %" PRIu32 "";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "BufferAllocationFailed ",
        id
      );

      this->m_textEventOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Event throttle reset functions
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    log_WARNING_HI_BufferAllocationFailed_ThrottleClear()
  {
    // Reset throttle counter
    this->m_BufferAllocationFailedThrottle = 0;
  }

  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    tlmWrite_NumSuccessfulAllocations(
        U32 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_NumSuccessfulAllocations) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_NumSuccessfulAllocations) {
        return;
      }
      else {
        this->m_last_NumSuccessfulAllocations = arg;
      }
    }
    else {
      this->m_first_update_NumSuccessfulAllocations = false;
      this->m_last_NumSuccessfulAllocations = arg;
    }

    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeGetOut_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeGetOut_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_NUMSUCCESSFULALLOCATIONS;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void DpManagerComponentBase ::
    tlmWrite_NumFailedAllocations(
        U32 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_NumFailedAllocations) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_NumFailedAllocations) {
        return;
      }
      else {
        this->m_last_NumFailedAllocations = arg;
      }
    }
    else {
      this->m_first_update_NumFailedAllocations = false;
      this->m_last_NumFailedAllocations = arg;
    }

    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeGetOut_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeGetOut_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_NUMFAILEDALLOCATIONS;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void DpManagerComponentBase ::
    tlmWrite_NumDataProducts(
        U32 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_NumDataProducts) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_NumDataProducts) {
        return;
      }
      else {
        this->m_last_NumDataProducts = arg;
      }
    }
    else {
      this->m_first_update_NumDataProducts = false;
      this->m_last_NumDataProducts = arg;
    }

    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeGetOut_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeGetOut_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_NUMDATAPRODUCTS;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void DpManagerComponentBase ::
    tlmWrite_NumBytes(
        U64 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_NumBytes) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_NumBytes) {
        return;
      }
      else {
        this->m_last_NumBytes = arg;
      }
    }
    else {
      this->m_first_update_NumBytes = false;
      this->m_last_NumBytes = arg;
    }

    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeGetOut_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeGetOut_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_NUMBYTES;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time DpManagerComponentBase ::
    getTime()
  {
    if (this->m_timeGetOut_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeGetOut_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus DpManagerComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer msg;
    FwQueuePriorityType priority = 0;

    Os::Queue::Status msgStatus = this->m_queue.receive(
      msg,
      Os::Queue::BLOCKING,
      priority
    );
    FW_ASSERT(
      msgStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(msgStatus)
    );

    // Reset to beginning of buffer
    msg.resetDeser();

    FwEnumStoreType desMsg = 0;
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == DPMANAGER_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
    deserStatus = msg.deserialize(portNum);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    switch (msgType) {
      // Handle async input port productRequestIn
      case PRODUCTREQUESTIN_DPREQUEST: {
        // Deserialize argument id
        FwDpIdType id;
        deserStatus = msg.deserialize(id);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Deserialize argument dataSize
        FwSizeType dataSize;
        deserStatus = msg.deserialize(dataSize);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->productRequestIn_handler(
          portNum,
          id,
          dataSize
        );

        break;
      }

      // Handle async input port productSendIn
      case PRODUCTSENDIN_DPSEND: {
        // Deserialize argument id
        FwDpIdType id;
        deserStatus = msg.deserialize(id);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Deserialize argument buffer
        Fw::Buffer buffer;
        deserStatus = msg.deserialize(buffer);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->productSendIn_handler(
          portNum,
          id,
          buffer
        );

        break;
      }

      // Handle async input port schedIn
      case SCHEDIN_SCHED: {
        // Deserialize argument context
        U32 context;
        deserStatus = msg.deserialize(context);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->schedIn_handler(
          portNum,
          context
        );

        break;
      }

      // Handle command CLEAR_EVENT_THROTTLE
      case CMD_CLEAR_EVENT_THROTTLE: {
        // Deserialize opcode
        FwOpcodeType opCode = 0;
        deserStatus = msg.deserialize(opCode);
        FW_ASSERT (
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Deserialize command sequence
        U32 cmdSeq = 0;
        deserStatus = msg.deserialize(cmdSeq);
        FW_ASSERT (
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        deserStatus = msg.deserialize(args);
        FW_ASSERT (
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Reset buffer
        args.resetDeser();

        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL
        if (args.getBuffLeft() != 0) {
          if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
            this->cmdResponse_out(opCode, cmdSeq, Fw::CmdResponse::FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif

        // Call handler function
        this->CLEAR_EVENT_THROTTLE_cmdHandler(opCode, cmdSeq);

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void DpManagerComponentBase ::
    m_p_cmdIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);
    DpManagerComponentBase* compPtr = static_cast<DpManagerComponentBase*>(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));

    // Select base class function based on opcode
    switch (opCode - idBase) {
      case OPCODE_CLEAR_EVENT_THROTTLE: {
        compPtr->CLEAR_EVENT_THROTTLE_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  Fw::Success DpManagerComponentBase ::
    m_p_productGetIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize,
        Fw::Buffer& buffer
    )
  {
    FW_ASSERT(callComp);
    DpManagerComponentBase* compPtr = static_cast<DpManagerComponentBase*>(callComp);
    return compPtr->productGetIn_handlerBase(
      portNum,
      id,
      dataSize,
      buffer
    );
  }

  void DpManagerComponentBase ::
    m_p_productRequestIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize
    )
  {
    FW_ASSERT(callComp);
    DpManagerComponentBase* compPtr = static_cast<DpManagerComponentBase*>(callComp);
    compPtr->productRequestIn_handlerBase(
      portNum,
      id,
      dataSize
    );
  }

  void DpManagerComponentBase ::
    m_p_productSendIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer
    )
  {
    FW_ASSERT(callComp);
    DpManagerComponentBase* compPtr = static_cast<DpManagerComponentBase*>(callComp);
    compPtr->productSendIn_handlerBase(
      portNum,
      id,
      buffer
    );
  }

  void DpManagerComponentBase ::
    m_p_schedIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    DpManagerComponentBase* compPtr = static_cast<DpManagerComponentBase*>(callComp);
    compPtr->schedIn_handlerBase(
      portNum,
      context
    );
  }

}
