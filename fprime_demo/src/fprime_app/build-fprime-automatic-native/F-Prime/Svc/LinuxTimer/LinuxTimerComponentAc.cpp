// ======================================================================
// \title  LinuxTimerComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for LinuxTimer component base class
// ======================================================================

#include "F-Prime/Svc/LinuxTimer/LinuxTimerComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void LinuxTimerComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect output port CycleOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CycleOut_OutputPorts());
      port++
    ) {
      this->m_CycleOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CycleOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CycleOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void LinuxTimerComponentBase ::
    set_CycleOut_OutputPort(
        FwIndexType portNum,
        Svc::InputCyclePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CycleOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void LinuxTimerComponentBase ::
    set_CycleOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CycleOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  LinuxTimerComponentBase ::
    LinuxTimerComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  LinuxTimerComponentBase ::
    ~LinuxTimerComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType LinuxTimerComponentBase ::
    getNum_CycleOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CycleOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool LinuxTimerComponentBase ::
    isConnected_CycleOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CycleOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void LinuxTimerComponentBase ::
    CycleOut_out(
        FwIndexType portNum,
        Os::RawTime& cycleStart
    )
  {
    FW_ASSERT(
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_CycleOut_OutputPort[portNum].invoke(
      cycleStart
    );
  }

}
