// ======================================================================
// \title  DpRecordSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpRecord struct
// ======================================================================

#ifndef Svc_DpRecordSerializableAc_HPP
#define Svc_DpRecordSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Dp/DpStateEnumAc.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Svc {

  //! Data structure representing a data product.
  class DpRecord :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          sizeof(U32) +
          sizeof(U32) +
          sizeof(U32) +
          sizeof(U32) +
          sizeof(U64) +
          sizeof(U32) +
          Fw::DpState::SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      DpRecord();

      //! Member constructor
      DpRecord(
          U32 id,
          U32 tSec,
          U32 tSub,
          U32 priority,
          U64 size,
          U32 blocks,
          Fw::DpState::T state
      );

      //! Copy constructor
      DpRecord(
          const DpRecord& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      DpRecord& operator=(
          const DpRecord& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const DpRecord& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const DpRecord& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const DpRecord& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member id
      U32 getid() const
      {
        return this->m_id;
      }

      //! Get member tSec
      U32 gettSec() const
      {
        return this->m_tSec;
      }

      //! Get member tSub
      U32 gettSub() const
      {
        return this->m_tSub;
      }

      //! Get member priority
      U32 getpriority() const
      {
        return this->m_priority;
      }

      //! Get member size
      U64 getsize() const
      {
        return this->m_size;
      }

      //! Get member blocks
      U32 getblocks() const
      {
        return this->m_blocks;
      }

      //! Get member state
      Fw::DpState::T getstate() const
      {
        return this->m_state.e;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          U32 id,
          U32 tSec,
          U32 tSub,
          U32 priority,
          U64 size,
          U32 blocks,
          Fw::DpState::T state
      );

      //! Set member id
      void setid(U32 id);

      //! Set member tSec
      void settSec(U32 tSec);

      //! Set member tSub
      void settSub(U32 tSub);

      //! Set member priority
      void setpriority(U32 priority);

      //! Set member size
      void setsize(U64 size);

      //! Set member blocks
      void setblocks(U32 blocks);

      //! Set member state
      void setstate(Fw::DpState::T state);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      U32 m_id;
      U32 m_tSec;
      U32 m_tSub;
      U32 m_priority;
      U64 m_size;
      U32 m_blocks;
      Fw::DpState m_state;

  };

}

#endif
