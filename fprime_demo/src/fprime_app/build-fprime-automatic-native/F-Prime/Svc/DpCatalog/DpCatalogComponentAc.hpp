// ======================================================================
// \title  DpCatalogComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpCatalog component base class
// ======================================================================

#ifndef Svc_DpCatalogComponentAc_HPP
#define Svc_DpCatalogComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Fw/Types/WaitEnumAc.hpp"
#include "Svc/DpCatalog/DpHdrFieldEnumAc.hpp"
#include "Svc/DpCatalog/DpRecordSerializableAc.hpp"
#include "Svc/FileDownlinkPorts/SendFileCompletePortAc.hpp"
#include "Svc/FileDownlinkPorts/SendFileRequestPortAc.hpp"
#include "Svc/FileDownlinkPorts/SendFileStatusEnumAc.hpp"
#include "Svc/Ping/PingPortAc.hpp"

namespace Svc {

  //! \class DpCatalogComponentBase
  //! \brief Auto-generated base for DpCatalog component
  //!
  //! A component for managing downlink of data products
  class DpCatalogComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class DpCatalogComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDDISP_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_FILEDONE_INPUT_PORTS = 1,
        NUM_PINGIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREG_OUTPUT_PORTS = 1,
        NUM_CMDSTATUS_OUTPUT_PORTS = 1,
        NUM_LOG_OUTPUT_PORTS = 1,
        NUM_LOGTEXT_OUTPUT_PORTS = 1,
        NUM_TIME_OUTPUT_PORTS = 1,
        NUM_TLM_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_FILEOUT_OUTPUT_PORTS = 1,
        NUM_PINGOUT_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_BUILD_CATALOG = 0x0, //!< Build catalog from data product directory. Will block until complete
        OPCODE_START_XMIT_CATALOG = 0x1, //!< Start transmitting catalog
        OPCODE_STOP_XMIT_CATALOG = 0x2, //!< Stop transmitting catalog
        OPCODE_CLEAR_CATALOG = 0x3, //!< clear existing catalog
      };

      //! Event IDs
      enum {
        EVENTID_DIRECTORYOPENERROR = 0x0, //!< Error opening directory
        EVENTID_PROCESSINGDIRECTORY = 0x1, //!< Processing directory
        EVENTID_PROCESSINGFILE = 0x2, //!< Processing directory
        EVENTID_PROCESSINGDIRECTORYCOMPLETE = 0x3, //!< Directory Processing complete
        EVENTID_CATALOGBUILDCOMPLETE = 0x4, //!< Catalog processing complete
        EVENTID_CATALOGXMITSTARTED = 0xa, //!< Catalog transmission started
        EVENTID_CATALOGXMITSTOPPED = 0xb, //!< Catalog transmission stopped
        EVENTID_CATALOGXMITCOMPLETED = 0xc, //!< Catalog transmission completed
        EVENTID_SENDINGPRODUCT = 0xd, //!< Sending product
        EVENTID_PRODUCTCOMPLETE = 0xe, //!< Product send complete
        EVENTID_COMPONENTNOTINITIALIZED = 0x14, //!< Component not initialized error
        EVENTID_COMPONENTNOMEMORY = 0x15, //!< Component didn't get memory error
        EVENTID_CATALOGFULL = 0x16, //!< Catalog is full
        EVENTID_FILEOPENERROR = 0x17, //!< Error opening file
        EVENTID_FILEREADERROR = 0x18, //!< Error opening file
        EVENTID_FILEHDRERROR = 0x19, //!< Error reading header data from DP file
        EVENTID_FILEHDRDESERROR = 0x1a, //!< Error deserializing header data
        EVENTID_DPINSERTERROR = 0x1b, //!< Error inserting entry into list
        EVENTID_DPDUPLICATE = 0x1c, //!< Error inserting entry into list
        EVENTID_DPCATALOGFULL = 0x1d, //!< Error inserting entry into list
        EVENTID_DPXMITINPROGRESS = 0x1e, //!< Tried to build catalog while downlink process active
        EVENTID_FILESIZEERROR = 0x1f, //!< Error getting file size
        EVENTID_NODPMEMORY = 0x20,
        EVENTID_NOTINITIALIZED = 0x21,
        EVENTID_XMITNOTACTIVE = 0x22,
        EVENTID_STATEFILEOPENERROR = 0x23,
        EVENTID_STATEFILEREADERROR = 0x24,
        EVENTID_STATEFILETRUNCATED = 0x25,
        EVENTID_NOSTATEFILESPECIFIED = 0x26,
        EVENTID_STATEFILEWRITEERROR = 0x27,
        EVENTID_NOSTATEFILE = 0x28,
        EVENTID_DPFILEXMITERROR = 0x29,
        EVENTID_DPFILESENDERROR = 0x2a,
      };

      //! Event throttle values: sets initial value of countdown variables
      enum {
        EVENTID_COMPONENTNOTINITIALIZED_THROTTLE = 10, //!< Throttle reset count for ComponentNotInitialized
        EVENTID_COMPONENTNOMEMORY_THROTTLE = 10, //!< Throttle reset count for ComponentNoMemory
        EVENTID_CATALOGFULL_THROTTLE = 10, //!< Throttle reset count for CatalogFull
        EVENTID_FILEOPENERROR_THROTTLE = 10, //!< Throttle reset count for FileOpenError
        EVENTID_FILEREADERROR_THROTTLE = 10, //!< Throttle reset count for FileReadError
        EVENTID_FILEHDRERROR_THROTTLE = 10, //!< Throttle reset count for FileHdrError
        EVENTID_FILEHDRDESERROR_THROTTLE = 10, //!< Throttle reset count for FileHdrDesError
        EVENTID_DPINSERTERROR_THROTTLE = 10, //!< Throttle reset count for DpInsertError
        EVENTID_DPDUPLICATE_THROTTLE = 10, //!< Throttle reset count for DpDuplicate
        EVENTID_DPCATALOGFULL_THROTTLE = 10, //!< Throttle reset count for DpCatalogFull
        EVENTID_DPXMITINPROGRESS_THROTTLE = 10, //!< Throttle reset count for DpXmitInProgress
        EVENTID_FILESIZEERROR_THROTTLE = 10, //!< Throttle reset count for FileSizeError
        EVENTID_DPFILEXMITERROR_THROTTLE = 10, //!< Throttle reset count for DpFileXmitError
        EVENTID_DPFILESENDERROR_THROTTLE = 10, //!< Throttle reset count for DpFileSendError
      };

      //! Channel IDs
      enum {
        CHANNELID_CATALOGDPS = 0x0, //!< Channel ID for CatalogDps
        CHANNELID_DPSSENT = 0x1, //!< Channel ID for DpsSent
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize DpCatalogComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return CmdDisp[portNum]
      Fw::InputCmdPort* get_CmdDisp_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return fileDone[portNum]
      Svc::InputSendFileCompletePort* get_fileDone_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return pingIn[portNum]
      Svc::InputPingPort* get_pingIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to CmdReg[portNum]
      void set_CmdReg_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to CmdStatus[portNum]
      void set_CmdStatus_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to Log[portNum]
      void set_Log_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to LogText[portNum]
      void set_LogText_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to Time[portNum]
      void set_Time_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to Tlm[portNum]
      void set_Tlm_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to fileOut[portNum]
      void set_fileOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputSendFileRequestPort* port //!< The input port
      );

      //! Connect port to pingOut[portNum]
      void set_pingOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputPingPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to CmdReg[portNum]
      void set_CmdReg_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to CmdStatus[portNum]
      void set_CmdStatus_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to Log[portNum]
      void set_Log_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to LogText[portNum]
      void set_LogText_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to Time[portNum]
      void set_Time_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to Tlm[portNum]
      void set_Tlm_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to pingOut[portNum]
      void set_pingOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct DpCatalogComponentBase object
      DpCatalogComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy DpCatalogComponentBase object
      virtual ~DpCatalogComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of CmdDisp input ports
      //!
      //! \return The number of CmdDisp input ports
      FwIndexType getNum_CmdDisp_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of fileDone input ports
      //!
      //! \return The number of fileDone input ports
      FwIndexType getNum_fileDone_InputPorts() const;

      //! Get the number of pingIn input ports
      //!
      //! \return The number of pingIn input ports
      FwIndexType getNum_pingIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of CmdReg output ports
      //!
      //! \return The number of CmdReg output ports
      FwIndexType getNum_CmdReg_OutputPorts() const;

      //! Get the number of CmdStatus output ports
      //!
      //! \return The number of CmdStatus output ports
      FwIndexType getNum_CmdStatus_OutputPorts() const;

      //! Get the number of Log output ports
      //!
      //! \return The number of Log output ports
      FwIndexType getNum_Log_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of LogText output ports
      //!
      //! \return The number of LogText output ports
      FwIndexType getNum_LogText_OutputPorts() const;

#endif

      //! Get the number of Time output ports
      //!
      //! \return The number of Time output ports
      FwIndexType getNum_Time_OutputPorts() const;

      //! Get the number of Tlm output ports
      //!
      //! \return The number of Tlm output ports
      FwIndexType getNum_Tlm_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of fileOut output ports
      //!
      //! \return The number of fileOut output ports
      FwIndexType getNum_fileOut_OutputPorts() const;

      //! Get the number of pingOut output ports
      //!
      //! \return The number of pingOut output ports
      FwIndexType getNum_pingOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port CmdReg is connected
      //!
      //! \return Whether port CmdReg is connected
      bool isConnected_CmdReg_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port CmdStatus is connected
      //!
      //! \return Whether port CmdStatus is connected
      bool isConnected_CmdStatus_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port Log is connected
      //!
      //! \return Whether port Log is connected
      bool isConnected_Log_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port LogText is connected
      //!
      //! \return Whether port LogText is connected
      bool isConnected_LogText_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port Time is connected
      //!
      //! \return Whether port Time is connected
      bool isConnected_Time_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port Tlm is connected
      //!
      //! \return Whether port Tlm is connected
      bool isConnected_Tlm_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port fileOut is connected
      //!
      //! \return Whether port fileOut is connected
      bool isConnected_fileOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port pingOut is connected
      //!
      //! \return Whether port pingOut is connected
      bool isConnected_pingOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port fileDone
      virtual void fileDone_handler(
          FwIndexType portNum, //!< The port number
          const Svc::SendFileResponse& resp
      ) = 0;

      //! Handler for input port pingIn
      virtual void pingIn_handler(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port fileDone
      void fileDone_handlerBase(
          FwIndexType portNum, //!< The port number
          const Svc::SendFileResponse& resp
      );

      //! Handler base-class function for input port pingIn
      void pingIn_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for typed async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port fileDone
      virtual void fileDone_preMsgHook(
          FwIndexType portNum, //!< The port number
          const Svc::SendFileResponse& resp
      );

      //! Pre-message hook for async input port pingIn
      virtual void pingIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port fileOut
      Svc::SendFileResponse fileOut_out(
          FwIndexType portNum, //!< The port number
          const Fw::StringBase& sourceFileName, //!< Path of file to downlink
          const Fw::StringBase& destFileName, //!< Path to store downlinked file at
          U32 offset, //!< Amount of data in bytes to downlink from file. 0 to read until end of file
          U32 length //!< Amount of data in bytes to downlink from file. 0 to read until end of file
      );

      //! Invoke output port pingOut
      void pingOut_out(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command BUILD_CATALOG
      //!
      //! Build catalog from data product directory. Will block until complete
      virtual void BUILD_CATALOG_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

      //! Handler for command START_XMIT_CATALOG
      //!
      //! Start transmitting catalog
      virtual void START_XMIT_CATALOG_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::Wait wait //!< have START_XMIT command complete wait for catalog to complete transmitting
      ) = 0;

      //! Handler for command STOP_XMIT_CATALOG
      //!
      //! Stop transmitting catalog
      virtual void STOP_XMIT_CATALOG_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

      //! Handler for command CLEAR_CATALOG
      //!
      //! clear existing catalog
      virtual void CLEAR_CATALOG_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command BUILD_CATALOG
      //!
      //! Build catalog from data product directory. Will block until complete
      void BUILD_CATALOG_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command START_XMIT_CATALOG
      //!
      //! Start transmitting catalog
      void START_XMIT_CATALOG_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command STOP_XMIT_CATALOG
      //!
      //! Stop transmitting catalog
      void STOP_XMIT_CATALOG_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command CLEAR_CATALOG
      //!
      //! clear existing catalog
      void CLEAR_CATALOG_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for async commands
      //
      // Each of these functions is invoked just before processing the
      // corresponding command. By default they do nothing. You can
      // override them to provide specific pre-command behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for command BUILD_CATALOG
      virtual void BUILD_CATALOG_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command START_XMIT_CATALOG
      virtual void START_XMIT_CATALOG_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command STOP_XMIT_CATALOG
      virtual void STOP_XMIT_CATALOG_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command CLEAR_CATALOG
      virtual void CLEAR_CATALOG_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event DirectoryOpenError
      //!
      //! Error opening directory
      void log_WARNING_HI_DirectoryOpenError(
          const Fw::StringBase& loc, //!< The directory
          I32 stat //!< status
      ) const;

      //! Log event ProcessingDirectory
      //!
      //! Processing directory
      void log_ACTIVITY_LO_ProcessingDirectory(
          const Fw::StringBase& directory //!< The directory
      ) const;

      //! Log event ProcessingFile
      //!
      //! Processing directory
      void log_ACTIVITY_LO_ProcessingFile(
          const Fw::StringBase& file //!< The file
      ) const;

      //! Log event ProcessingDirectoryComplete
      //!
      //! Directory Processing complete
      void log_ACTIVITY_HI_ProcessingDirectoryComplete(
          const Fw::StringBase& loc, //!< The directory
          U32 total, //!< total data products
          U32 pending, //!< pending data products
          U64 pending_bytes //!< pending data product volume
      ) const;

      //! Log event CatalogBuildComplete
      //!
      //! Catalog processing complete
      void log_ACTIVITY_HI_CatalogBuildComplete() const;

      //! Log event CatalogXmitStarted
      //!
      //! Catalog transmission started
      void log_ACTIVITY_HI_CatalogXmitStarted() const;

      //! Log event CatalogXmitStopped
      //!
      //! Catalog transmission stopped
      void log_ACTIVITY_HI_CatalogXmitStopped(
          U32 bytes //!< data transmitted
      ) const;

      //! Log event CatalogXmitCompleted
      //!
      //! Catalog transmission completed
      void log_ACTIVITY_HI_CatalogXmitCompleted(
          U64 bytes //!< data transmitted
      ) const;

      //! Log event SendingProduct
      //!
      //! Sending product
      void log_ACTIVITY_LO_SendingProduct(
          const Fw::StringBase& file, //!< The file
          U32 bytes, //!< file size
          U32 prio //!< DP priority
      ) const;

      //! Log event ProductComplete
      //!
      //! Product send complete
      void log_ACTIVITY_LO_ProductComplete(
          const Fw::StringBase& file //!< The file
      ) const;

      //! Log event ComponentNotInitialized
      //!
      //! Component not initialized error
      void log_WARNING_HI_ComponentNotInitialized();

      //! Log event ComponentNoMemory
      //!
      //! Component didn't get memory error
      void log_WARNING_HI_ComponentNoMemory();

      //! Log event CatalogFull
      //!
      //! Catalog is full
      void log_WARNING_HI_CatalogFull(
          const Fw::StringBase& dir //!< last directory read
      );

      //! Log event FileOpenError
      //!
      //! Error opening file
      void log_WARNING_HI_FileOpenError(
          const Fw::StringBase& loc, //!< The directory
          I32 stat //!< status
      );

      //! Log event FileReadError
      //!
      //! Error opening file
      void log_WARNING_HI_FileReadError(
          const Fw::StringBase& file, //!< The file
          I32 stat //!< status
      );

      //! Log event FileHdrError
      //!
      //! Error reading header data from DP file
      void log_WARNING_HI_FileHdrError(
          const Fw::StringBase& file, //!< The file
          Svc::DpHdrField field, //!< incorrect value
          U32 exp, //!< expected value
          U32 act //!< expected value
      );

      //! Log event FileHdrDesError
      //!
      //! Error deserializing header data
      void log_WARNING_HI_FileHdrDesError(
          const Fw::StringBase& file, //!< The file
          I32 stat
      );

      //! Log event DpInsertError
      //!
      //! Error inserting entry into list
      void log_WARNING_HI_DpInsertError(
          Svc::DpRecord dp //!< The DP
      );

      //! Log event DpDuplicate
      //!
      //! Error inserting entry into list
      void log_DIAGNOSTIC_DpDuplicate(
          Svc::DpRecord dp //!< The DP
      );

      //! Log event DpCatalogFull
      //!
      //! Error inserting entry into list
      void log_WARNING_HI_DpCatalogFull(
          Svc::DpRecord dp //!< The DP
      );

      //! Log event DpXmitInProgress
      //!
      //! Tried to build catalog while downlink process active
      void log_WARNING_LO_DpXmitInProgress();

      //! Log event FileSizeError
      //!
      //! Error getting file size
      void log_WARNING_HI_FileSizeError(
          const Fw::StringBase& file, //!< The file
          I32 stat
      );

      //! Log event NoDpMemory
      void log_WARNING_HI_NoDpMemory() const;

      //! Log event NotInitialized
      void log_WARNING_HI_NotInitialized() const;

      //! Log event XmitNotActive
      void log_WARNING_LO_XmitNotActive() const;

      //! Log event StateFileOpenError
      void log_WARNING_HI_StateFileOpenError(
          const Fw::StringBase& file, //!< The file
          I32 stat
      ) const;

      //! Log event StateFileReadError
      void log_WARNING_HI_StateFileReadError(
          const Fw::StringBase& file, //!< The file
          I32 stat,
          I32 offset
      ) const;

      //! Log event StateFileTruncated
      void log_WARNING_HI_StateFileTruncated(
          const Fw::StringBase& file, //!< The file
          I32 offset,
          I32 size
      ) const;

      //! Log event NoStateFileSpecified
      void log_WARNING_LO_NoStateFileSpecified() const;

      //! Log event StateFileWriteError
      void log_WARNING_HI_StateFileWriteError(
          const Fw::StringBase& file, //!< The file
          I32 stat
      ) const;

      //! Log event NoStateFile
      void log_WARNING_LO_NoStateFile(
          const Fw::StringBase& file //!< The file
      ) const;

      //! Log event DpFileXmitError
      void log_WARNING_HI_DpFileXmitError(
          const Fw::StringBase& file, //!< The file
          Svc::SendFileStatus stat
      );

      //! Log event DpFileSendError
      void log_WARNING_HI_DpFileSendError(
          const Fw::StringBase& file, //!< The file
          Svc::SendFileStatus stat
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event throttle reset functions
      // ----------------------------------------------------------------------

      //! Reset throttle value for ComponentNotInitialized
      void log_WARNING_HI_ComponentNotInitialized_ThrottleClear();

      //! Reset throttle value for ComponentNoMemory
      void log_WARNING_HI_ComponentNoMemory_ThrottleClear();

      //! Reset throttle value for CatalogFull
      void log_WARNING_HI_CatalogFull_ThrottleClear();

      //! Reset throttle value for FileOpenError
      void log_WARNING_HI_FileOpenError_ThrottleClear();

      //! Reset throttle value for FileReadError
      void log_WARNING_HI_FileReadError_ThrottleClear();

      //! Reset throttle value for FileHdrError
      void log_WARNING_HI_FileHdrError_ThrottleClear();

      //! Reset throttle value for FileHdrDesError
      void log_WARNING_HI_FileHdrDesError_ThrottleClear();

      //! Reset throttle value for DpInsertError
      void log_WARNING_HI_DpInsertError_ThrottleClear();

      //! Reset throttle value for DpDuplicate
      void log_DIAGNOSTIC_DpDuplicate_ThrottleClear();

      //! Reset throttle value for DpCatalogFull
      void log_WARNING_HI_DpCatalogFull_ThrottleClear();

      //! Reset throttle value for DpXmitInProgress
      void log_WARNING_LO_DpXmitInProgress_ThrottleClear();

      //! Reset throttle value for FileSizeError
      void log_WARNING_HI_FileSizeError_ThrottleClear();

      //! Reset throttle value for DpFileXmitError
      void log_WARNING_HI_DpFileXmitError_ThrottleClear();

      //! Reset throttle value for DpFileSendError
      void log_WARNING_HI_DpFileSendError_ThrottleClear();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel CatalogDps
      //!
      //! Number of data products in catalog
      void tlmWrite_CatalogDps(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel DpsSent
      //!
      //! Number of data products sent
      void tlmWrite_DpsSent(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port CmdDisp
      static void m_p_CmdDisp_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port fileDone
      static void m_p_fileDone_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          const Svc::SendFileResponse& resp
      );

      //! Callback for port pingIn
      static void m_p_pingIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port CmdDisp
      Fw::InputCmdPort m_CmdDisp_InputPort[NUM_CMDDISP_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port fileDone
      Svc::InputSendFileCompletePort m_fileDone_InputPort[NUM_FILEDONE_INPUT_PORTS];

      //! Input port pingIn
      Svc::InputPingPort m_pingIn_InputPort[NUM_PINGIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port CmdReg
      Fw::OutputCmdRegPort m_CmdReg_OutputPort[NUM_CMDREG_OUTPUT_PORTS];

      //! Output port CmdStatus
      Fw::OutputCmdResponsePort m_CmdStatus_OutputPort[NUM_CMDSTATUS_OUTPUT_PORTS];

      //! Output port Log
      Fw::OutputLogPort m_Log_OutputPort[NUM_LOG_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port LogText
      Fw::OutputLogTextPort m_LogText_OutputPort[NUM_LOGTEXT_OUTPUT_PORTS];

#endif

      //! Output port Time
      Fw::OutputTimePort m_Time_OutputPort[NUM_TIME_OUTPUT_PORTS];

      //! Output port Tlm
      Fw::OutputTlmPort m_Tlm_OutputPort[NUM_TLM_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port fileOut
      Svc::OutputSendFileRequestPort m_fileOut_OutputPort[NUM_FILEOUT_OUTPUT_PORTS];

      //! Output port pingOut
      Svc::OutputPingPort m_pingOut_OutputPort[NUM_PINGOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Counter values for event throttling
      // ----------------------------------------------------------------------

      //! Throttle for ComponentNotInitialized
      FwIndexType m_ComponentNotInitializedThrottle;

      //! Throttle for ComponentNoMemory
      FwIndexType m_ComponentNoMemoryThrottle;

      //! Throttle for CatalogFull
      FwIndexType m_CatalogFullThrottle;

      //! Throttle for FileOpenError
      FwIndexType m_FileOpenErrorThrottle;

      //! Throttle for FileReadError
      FwIndexType m_FileReadErrorThrottle;

      //! Throttle for FileHdrError
      FwIndexType m_FileHdrErrorThrottle;

      //! Throttle for FileHdrDesError
      FwIndexType m_FileHdrDesErrorThrottle;

      //! Throttle for DpInsertError
      FwIndexType m_DpInsertErrorThrottle;

      //! Throttle for DpDuplicate
      FwIndexType m_DpDuplicateThrottle;

      //! Throttle for DpCatalogFull
      FwIndexType m_DpCatalogFullThrottle;

      //! Throttle for DpXmitInProgress
      FwIndexType m_DpXmitInProgressThrottle;

      //! Throttle for FileSizeError
      FwIndexType m_FileSizeErrorThrottle;

      //! Throttle for DpFileXmitError
      FwIndexType m_DpFileXmitErrorThrottle;

      //! Throttle for DpFileSendError
      FwIndexType m_DpFileSendErrorThrottle;

  };

}

#endif
