// ======================================================================
// \title  CustomVersionDbSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for CustomVersionDb struct
// ======================================================================

#include "F-Prime/Svc/Version/CustomVersionDbSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  CustomVersionDb ::
    CustomVersionDb() :
      Serializable(),
      m_version_enum(Svc::VersionCfg::VersionEnum::PROJECT_VERSION_00),
      m_version_value(m___fprime_ac_version_value_buffer, sizeof m___fprime_ac_version_value_buffer, Fw::String("")),
      m_version_status(Svc::VersionStatus::OK)
  {

  }

  CustomVersionDb ::
    CustomVersionDb(
        Svc::VersionCfg::VersionEnum::T version_enum,
        const Fw::StringBase& version_value,
        Svc::VersionStatus::T version_status
    ) :
      Serializable(),
      m_version_enum(version_enum),
      m_version_value(m___fprime_ac_version_value_buffer, sizeof m___fprime_ac_version_value_buffer, version_value),
      m_version_status(version_status)
  {

  }

  CustomVersionDb ::
    CustomVersionDb(const CustomVersionDb& obj) :
      Serializable(),
      m_version_enum(obj.m_version_enum),
      m_version_value(m___fprime_ac_version_value_buffer, sizeof m___fprime_ac_version_value_buffer, obj.m_version_value),
      m_version_status(obj.m_version_status)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  CustomVersionDb& CustomVersionDb ::
    operator=(const CustomVersionDb& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_version_enum, obj.m_version_value, obj.m_version_status);
    return *this;
  }

  bool CustomVersionDb ::
    operator==(const CustomVersionDb& obj) const
  {
    return (
      (this->m_version_enum == obj.m_version_enum) &&
      (this->m_version_value == obj.m_version_value) &&
      (this->m_version_status == obj.m_version_status)
    );
  }

  bool CustomVersionDb ::
    operator!=(const CustomVersionDb& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const CustomVersionDb& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus CustomVersionDb ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->m_version_enum);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->m_version_value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->m_version_status);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus CustomVersionDb ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->m_version_enum);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->m_version_value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->m_version_status);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING

  void CustomVersionDb ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "version_enum = %s, "
      "version_value = %s, "
      "version_status = %s"
      " )";

    // Declare strings to hold any serializable toString() arguments
    Fw::String version_enumStr;
    Fw::String version_statusStr;

    // Call toString for arrays and serializable types
    this->m_version_enum.toString(version_enumStr);
    this->m_version_status.toString(version_statusStr);

    sb.format(
      formatString,
      version_enumStr.toChar(),
      this->m_version_value.toChar(),
      version_statusStr.toChar()
    );
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void CustomVersionDb ::
    set(
        Svc::VersionCfg::VersionEnum::T version_enum,
        const Fw::StringBase& version_value,
        Svc::VersionStatus::T version_status
    )
  {
    this->m_version_enum = version_enum;
    this->m_version_value = version_value;
    this->m_version_status = version_status;
  }

  void CustomVersionDb ::
    setversion_enum(Svc::VersionCfg::VersionEnum::T version_enum)
  {
    this->m_version_enum = version_enum;
  }

  void CustomVersionDb ::
    setversion_value(const Fw::StringBase& version_value)
  {
    this->m_version_value = version_value;
  }

  void CustomVersionDb ::
    setversion_status(Svc::VersionStatus::T version_status)
  {
    this->m_version_status = version_status;
  }

}
