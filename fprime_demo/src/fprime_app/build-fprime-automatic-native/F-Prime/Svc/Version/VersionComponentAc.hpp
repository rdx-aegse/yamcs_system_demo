// ======================================================================
// \title  VersionComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Version component base class
// ======================================================================

#ifndef Svc_VersionComponentAc_HPP
#define Svc_VersionComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Os/Mutex.hpp"
#include "Svc/Ports/VersionPorts/VersionPortAc.hpp"
#include "Svc/Version/CustomVersionDbSerializableAc.hpp"
#include "Svc/Version/VersionEnabledEnumAc.hpp"
#include "Svc/Version/VersionTypeEnumAc.hpp"
#include "config/VersionEnumEnumAc.hpp"

namespace Svc {

  //! \class VersionComponentBase
  //! \brief Auto-generated base for Version component
  class VersionComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class VersionComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_GETVERSION_INPUT_PORTS = 1,
        NUM_SETVERSION_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGOUT_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_LOGOUT_OUTPUT_PORTS = 1,
        NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
        NUM_TIMECALLER_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_ENABLE = 0x0, //!< A command to enable or disable Event verbosity and Telemetry
        OPCODE_VERSION = 0x1, //!< Report version as Event
      };

      //! Event IDs
      enum {
        EVENTID_FRAMEWORKVERSION = 0x0, //!< Version of the git repository.
        EVENTID_PROJECTVERSION = 0x1, //!< Version of the git repository.
        EVENTID_LIBRARYVERSIONS = 0x2, //!< Version of the git repository.
        EVENTID_CUSTOMVERSIONS = 0x3, //!< Version of the git repository.
      };

      //! Channel IDs
      enum {
        CHANNELID_FRAMEWORKVERSION = 0x0, //!< Channel ID for FrameworkVersion
        CHANNELID_PROJECTVERSION = 0x1, //!< Channel ID for ProjectVersion
        CHANNELID_CUSTOMVERSION01 = 0x2, //!< Channel ID for CustomVersion01
        CHANNELID_CUSTOMVERSION02 = 0x3, //!< Channel ID for CustomVersion02
        CHANNELID_CUSTOMVERSION03 = 0x4, //!< Channel ID for CustomVersion03
        CHANNELID_CUSTOMVERSION04 = 0x5, //!< Channel ID for CustomVersion04
        CHANNELID_CUSTOMVERSION05 = 0x6, //!< Channel ID for CustomVersion05
        CHANNELID_CUSTOMVERSION06 = 0x7, //!< Channel ID for CustomVersion06
        CHANNELID_CUSTOMVERSION07 = 0x8, //!< Channel ID for CustomVersion07
        CHANNELID_CUSTOMVERSION08 = 0x9, //!< Channel ID for CustomVersion08
        CHANNELID_CUSTOMVERSION09 = 0xa, //!< Channel ID for CustomVersion09
        CHANNELID_CUSTOMVERSION10 = 0xb, //!< Channel ID for CustomVersion10
        CHANNELID_LIBRARYVERSION01 = 0xc, //!< Channel ID for LibraryVersion01
        CHANNELID_LIBRARYVERSION02 = 0xd, //!< Channel ID for LibraryVersion02
        CHANNELID_LIBRARYVERSION03 = 0xe, //!< Channel ID for LibraryVersion03
        CHANNELID_LIBRARYVERSION04 = 0xf, //!< Channel ID for LibraryVersion04
        CHANNELID_LIBRARYVERSION05 = 0x10, //!< Channel ID for LibraryVersion05
        CHANNELID_LIBRARYVERSION06 = 0x11, //!< Channel ID for LibraryVersion06
        CHANNELID_LIBRARYVERSION07 = 0x12, //!< Channel ID for LibraryVersion07
        CHANNELID_LIBRARYVERSION08 = 0x13, //!< Channel ID for LibraryVersion08
        CHANNELID_LIBRARYVERSION09 = 0x14, //!< Channel ID for LibraryVersion09
        CHANNELID_LIBRARYVERSION10 = 0x15, //!< Channel ID for LibraryVersion10
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize VersionComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return getVersion[portNum]
      Svc::InputVersionPort* get_getVersion_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return setVersion[portNum]
      Svc::InputVersionPort* get_setVersion_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct VersionComponentBase object
      VersionComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy VersionComponentBase object
      virtual ~VersionComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      FwIndexType getNum_cmdIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of getVersion input ports
      //!
      //! \return The number of getVersion input ports
      FwIndexType getNum_getVersion_InputPorts() const;

      //! Get the number of setVersion input ports
      //!
      //! \return The number of setVersion input ports
      FwIndexType getNum_setVersion_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegOut output ports
      //!
      //! \return The number of cmdRegOut output ports
      FwIndexType getNum_cmdRegOut_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      FwIndexType getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of logOut output ports
      //!
      //! \return The number of logOut output ports
      FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of logTextOut output ports
      //!
      //! \return The number of logTextOut output ports
      FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

      //! Get the number of timeCaller output ports
      //!
      //! \return The number of timeCaller output ports
      FwIndexType getNum_timeCaller_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      FwIndexType getNum_tlmOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegOut is connected
      //!
      //! \return Whether port cmdRegOut is connected
      bool isConnected_cmdRegOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port logOut is connected
      //!
      //! \return Whether port logOut is connected
      bool isConnected_logOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port logTextOut is connected
      //!
      //! \return Whether port logTextOut is connected
      bool isConnected_logTextOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port timeCaller is connected
      //!
      //! \return Whether port timeCaller is connected
      bool isConnected_timeCaller_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port getVersion
      virtual void getVersion_handler(
          FwIndexType portNum, //!< The port number
          const Svc::VersionCfg::VersionEnum& version_id, //!< The entry to access
          Fw::StringBase& version_string, //!< The value to be passed
          Svc::VersionStatus& status //!< The command response argument
      ) = 0;

      //! Handler for input port setVersion
      virtual void setVersion_handler(
          FwIndexType portNum, //!< The port number
          const Svc::VersionCfg::VersionEnum& version_id, //!< The entry to access
          Fw::StringBase& version_string, //!< The value to be passed
          Svc::VersionStatus& status //!< The command response argument
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port getVersion
      void getVersion_handlerBase(
          FwIndexType portNum, //!< The port number
          const Svc::VersionCfg::VersionEnum& version_id, //!< The entry to access
          Fw::StringBase& version_string, //!< The value to be passed
          Svc::VersionStatus& status //!< The command response argument
      );

      //! Handler base-class function for input port setVersion
      void setVersion_handlerBase(
          FwIndexType portNum, //!< The port number
          const Svc::VersionCfg::VersionEnum& version_id, //!< The entry to access
          Fw::StringBase& version_string, //!< The value to be passed
          Svc::VersionStatus& status //!< The command response argument
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command ENABLE
      //!
      //! A command to enable or disable Event verbosity and Telemetry
      virtual void ENABLE_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Svc::VersionEnabled enable //!< whether or not Version telemetry is enabled
      ) = 0;

      //! Handler for command VERSION
      //!
      //! Report version as Event
      virtual void VERSION_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Svc::VersionType version_type //!< which version type Event is requested
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command ENABLE
      //!
      //! A command to enable or disable Event verbosity and Telemetry
      void ENABLE_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command VERSION
      //!
      //! Report version as Event
      void VERSION_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event FrameworkVersion
      //!
      //! Version of the git repository.
      void log_ACTIVITY_LO_FrameworkVersion(
          const Fw::StringBase& version //!< version string
      ) const;

      //! Log event ProjectVersion
      //!
      //! Version of the git repository.
      void log_ACTIVITY_LO_ProjectVersion(
          const Fw::StringBase& version //!< version string
      ) const;

      //! Log event LibraryVersions
      //!
      //! Version of the git repository.
      void log_ACTIVITY_LO_LibraryVersions(
          const Fw::StringBase& version //!< version string
      ) const;

      //! Log event CustomVersions
      //!
      //! Version of the git repository.
      void log_ACTIVITY_LO_CustomVersions(
          Svc::VersionCfg::VersionEnum version_enum, //!< The enum to access
          const Fw::StringBase& version_value //!< version
      ) const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel FrameworkVersion
      //!
      //! Software framework version
      void tlmWrite_FrameworkVersion(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel ProjectVersion
      //!
      //! Software project version
      void tlmWrite_ProjectVersion(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion01
      //!
      //! Custom Versions
      void tlmWrite_CustomVersion01(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion02
      void tlmWrite_CustomVersion02(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion03
      void tlmWrite_CustomVersion03(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion04
      void tlmWrite_CustomVersion04(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion05
      void tlmWrite_CustomVersion05(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion06
      void tlmWrite_CustomVersion06(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion07
      void tlmWrite_CustomVersion07(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion08
      void tlmWrite_CustomVersion08(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion09
      void tlmWrite_CustomVersion09(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel CustomVersion10
      void tlmWrite_CustomVersion10(
          const Svc::CustomVersionDb& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion01
      //!
      //! Library Versions
      void tlmWrite_LibraryVersion01(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion02
      void tlmWrite_LibraryVersion02(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion03
      void tlmWrite_LibraryVersion03(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion04
      void tlmWrite_LibraryVersion04(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion05
      void tlmWrite_LibraryVersion05(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion06
      void tlmWrite_LibraryVersion06(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion07
      void tlmWrite_LibraryVersion07(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion08
      void tlmWrite_LibraryVersion08(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion09
      void tlmWrite_LibraryVersion09(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel LibraryVersion10
      void tlmWrite_LibraryVersion10(
          const Fw::StringBase& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Mutex operations for guarded ports
      //
      // You can override these operations to provide more sophisticated
      // synchronization
      // ----------------------------------------------------------------------

      //! Lock the guarded mutex
      virtual void lock();

      //! Unlock the guarded mutex
      virtual void unLock();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port getVersion
      static void m_p_getVersion_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          const Svc::VersionCfg::VersionEnum& version_id, //!< The entry to access
          Fw::StringBase& version_string, //!< The value to be passed
          Svc::VersionStatus& status //!< The command response argument
      );

      //! Callback for port setVersion
      static void m_p_setVersion_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          const Svc::VersionCfg::VersionEnum& version_id, //!< The entry to access
          Fw::StringBase& version_string, //!< The value to be passed
          Svc::VersionStatus& status //!< The command response argument
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port getVersion
      Svc::InputVersionPort m_getVersion_InputPort[NUM_GETVERSION_INPUT_PORTS];

      //! Input port setVersion
      Svc::InputVersionPort m_setVersion_InputPort[NUM_SETVERSION_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegOut
      Fw::OutputCmdRegPort m_cmdRegOut_OutputPort[NUM_CMDREGOUT_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port logOut
      Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port logTextOut
      Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

      //! Output port timeCaller
      Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Mutexes
      // ----------------------------------------------------------------------

      //! Mutex for guarded ports
      Os::Mutex m_guardedPortMutex;

  };

}

#endif
