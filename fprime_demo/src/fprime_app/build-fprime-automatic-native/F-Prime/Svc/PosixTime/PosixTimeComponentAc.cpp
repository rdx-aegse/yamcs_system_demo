// ======================================================================
// \title  PosixTimeComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for PosixTime component base class
// ======================================================================

#include "F-Prime/Svc/PosixTime/PosixTimeComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void PosixTimeComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port timeGetPort
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeGetPort_InputPorts());
      port++
    ) {
      this->m_timeGetPort_InputPort[port].init();
      this->m_timeGetPort_InputPort[port].addCallComp(
        this,
        m_p_timeGetPort_in
      );
      this->m_timeGetPort_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeGetPort_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeGetPort_InputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputTimePort* PosixTimeComponentBase ::
    get_timeGetPort_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_timeGetPort_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_timeGetPort_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  PosixTimeComponentBase ::
    PosixTimeComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  PosixTimeComponentBase ::
    ~PosixTimeComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType PosixTimeComponentBase ::
    getNum_timeGetPort_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeGetPort_InputPort));
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void PosixTimeComponentBase ::
    timeGetPort_handlerBase(
        FwIndexType portNum,
        Fw::Time& time
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_timeGetPort_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->timeGetPort_handler(
      portNum,
      time
    );
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void PosixTimeComponentBase ::
    m_p_timeGetPort_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Time& time
    )
  {
    FW_ASSERT(callComp);
    PosixTimeComponentBase* compPtr = static_cast<PosixTimeComponentBase*>(callComp);
    compPtr->timeGetPort_handlerBase(
      portNum,
      time
    );
  }

}
