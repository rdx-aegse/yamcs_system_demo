// ======================================================================
// \title  DpWrittenPortAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpWritten port
// ======================================================================

#ifndef Svc_DpWrittenPortAc_HPP
#define Svc_DpWrittenPortAc_HPP

#include <cstdio>
#include <cstring>

#include "FpConfig.hpp"
#include "Fw/Comp/PassiveComponentBase.hpp"
#include "Fw/Port/InputPortBase.hpp"
#include "Fw/Port/OutputPortBase.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/StringType.hpp"

namespace Svc {

  //! Input DpWritten port
  //! Send a notification that a data product was written
  class InputDpWrittenPort :
    public Fw::InputPortBase
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representations of the port arguments
        SERIALIZED_SIZE =
          Fw::StringBase::STATIC_SERIALIZED_SIZE(200) +
          sizeof(FwDpPriorityType) +
          sizeof(FwSizeType)
      };

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The port callback function type
      typedef void (*CompFuncPtr)(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        const Fw::StringBase& fileName,
        FwDpPriorityType priority,
        FwSizeType size
      );

    public:

      // ----------------------------------------------------------------------
      // Input Port Member functions
      // ----------------------------------------------------------------------

      //! Constructor
      InputDpWrittenPort();

      //! Initialization function
      void init();

      //! Register a component
      void addCallComp(
          Fw::PassiveComponentBase* callComp, //!< The containing component
          CompFuncPtr funcPtr //!< The port callback function
      );

      //! Invoke a port interface
      void invoke(
          const Fw::StringBase& fileName, //!< The file name
          FwDpPriorityType priority, //!< The priority
          FwSizeType size //!< The file size
      );

    private:

#if FW_PORT_SERIALIZATION == 1

      //! Invoke the port with serialized arguments
      Fw::SerializeStatus invokeSerial(Fw::SerializeBufferBase& _buffer);

#endif

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The pointer to the port callback function
      CompFuncPtr m_func;

  };

  //! Output DpWritten port
  //! Send a notification that a data product was written
  class OutputDpWrittenPort :
    public Fw::OutputPortBase
  {

    public:

      // ----------------------------------------------------------------------
      // Output Port Member functions
      // ----------------------------------------------------------------------

      //! Constructor
      OutputDpWrittenPort();

      //! Initialization function
      void init();

      //! Register an input port
      void addCallPort(
          InputDpWrittenPort* callPort //!< The input port
      );

      //! Invoke a port interface
      void invoke(
          const Fw::StringBase& fileName, //!< The file name
          FwDpPriorityType priority, //!< The priority
          FwSizeType size //!< The file size
      ) const;

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The pointer to the input port
      InputDpWrittenPort* m_port;

  };

}

#endif
