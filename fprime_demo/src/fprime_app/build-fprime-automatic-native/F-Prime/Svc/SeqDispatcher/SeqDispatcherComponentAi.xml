<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
SeqDispatcherComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Svc" name="SeqDispatcher" kind="active">

  <comment>
  Dispatches command sequences to available command sequencers
  </comment>

  <import_enum_type>Fw/Types/WaitEnumAi.xml</import_enum_type>
  <import_enum_type>Svc/SeqDispatcher/SeqDispatcher_CmdSequencerStateEnumAi.xml</import_enum_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
  <import_port_type>Svc/Seq/CmdSeqInPortAi.xml</import_port_type>

  <ports>
    <port name="cmdIn" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Port for receiving commands
      </comment>
    </port>
    <port name="cmdRegOut" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Port for sending command registrations
      </comment>
    </port>
    <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Port for sending command responses
      </comment>
    </port>
    <port name="logOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Port for sending events to downlink
      </comment>
    </port>
    <port name="logTextOut" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Port for sending textual representation of events
      </comment>
    </port>
    <port name="seqDoneIn" data_type="Fw::CmdResponse" kind="async_input" max_number="2" full="assert">
      <comment>
      Called by a command sequencer whenever it has finished any sequence
      </comment>
    </port>
    <port name="seqRunIn" data_type="Svc::CmdSeqIn" kind="async_input" max_number="1" full="assert">
      <comment>
      Dispatches a sequence to the first available command sequencer
      </comment>
    </port>
    <port name="seqRunOut" data_type="Svc::CmdSeqIn" kind="output" max_number="2"/>
    <port name="seqStartIn" data_type="Svc::CmdSeqIn" kind="async_input" max_number="2" full="assert">
      <comment>
      Called by cmdsequencer whenever it starts any sequence
      </comment>
    </port>
    <port name="timeCaller" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      Port for requesting the current time
      </comment>
    </port>
    <port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
      <comment>
      Port for sending telemetry channels to downlink
      </comment>
    </port>
  </ports>

  <commands>
    <command kind="async" opcode="0x0" mnemonic="RUN" full="assert">
      <comment>
      Dispatches a sequence to the first available sequencer
      </comment>
      <args>
        <arg name="fileName" type="string" size="240">
          <comment>
          The name of the sequence file
          </comment>
        </arg>
        <arg name="block" type="Fw::Wait">
          <comment>
          Return command status when complete or not
          </comment>
        </arg>
      </args>
    </command>
    <command kind="async" opcode="0x1" mnemonic="LOG_STATUS" full="assert">
      <comment>
      Logs via Events the state of each connected command sequencer
      </comment>
    </command>
  </commands>

  <events>
    <event id="0x0" name="InvalidSequencer" severity="WARNING_HI" format_string="Invalid sequence index %u">
      <args>
        <arg name="idx" type="U16"/>
      </args>
    </event>
    <event id="0x1" name="NoAvailableSequencers" severity="WARNING_HI" format_string="No available cmd sequencers to dispatch a sequence to"/>
    <event id="0x2" name="UnknownSequenceFinished" severity="WARNING_LO" format_string="Sequencer %u completed a sequence with no matching start notification">
      <args>
        <arg name="idx" type="U16"/>
      </args>
    </event>
    <event id="0x3" name="ConflictingSequenceStarted" severity="WARNING_HI" format_string="Sequencer %u started a sequence %s while still running %s">
      <args>
        <arg name="idx" type="U16"/>
        <arg name="newSequence" type="string" size="240"/>
        <arg name="sequenceInInternalState" type="string" size="240"/>
      </args>
    </event>
    <event id="0x4" name="UnexpectedSequenceStarted" severity="WARNING_LO" format_string="Sequencer %u was externally commanded to start a sequence %s">
      <args>
        <arg name="idx" type="U16"/>
        <arg name="newSequence" type="string" size="240"/>
      </args>
    </event>
    <event id="0x5" name="LogSequencerStatus" severity="ACTIVITY_LO" format_string="Sequencer %u with state %s is running file %s">
      <args>
        <arg name="idx" type="U16"/>
        <arg name="state" type="Svc::SeqDispatcher_CmdSequencerState"/>
        <arg name="filename" type="string" size="240"/>
      </args>
    </event>
  </events>

  <telemetry>
    <channel id="0x0" name="dispatchedCount" data_type="U32" update="always">
      <comment>
      Number of sequences dispatched
      </comment>
    </channel>
    <channel id="0x1" name="errorCount" data_type="U32" update="always">
      <comment>
      Number of sequences dispatched that returned an error. Note: if a sequence
      was run in non-blocking mode, even if the sequence errors out, this error
      count will never increase
      </comment>
    </channel>
    <channel id="0x2" name="sequencersAvailable" data_type="U32" update="always">
      <comment>
      Number of sequencers in an available state
      </comment>
    </channel>
  </telemetry>

</component>
