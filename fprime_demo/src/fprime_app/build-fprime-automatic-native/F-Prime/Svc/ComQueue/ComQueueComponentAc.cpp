// ======================================================================
// \title  ComQueueComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ComQueue component base class
// ======================================================================

#include "F-Prime/Svc/ComQueue/ComQueueComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  namespace {
    enum MsgTypeEnum {
      COMQUEUE_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      BUFFQUEUEIN_BUFFERSEND,
      COMQUEUEIN_COM,
      COMSTATUSIN_SUCCESSCONDITION,
      RUN_SCHED,
    };

    // Get the max size by constructing a union of the async input, command, and
    // internal port serialization sizes
    union BuffUnion {
      BYTE buffQueueInPortSize[Fw::InputBufferSendPort::SERIALIZED_SIZE];
      BYTE comQueueInPortSize[Fw::InputComPort::SERIALIZED_SIZE];
      BYTE comStatusInPortSize[Fw::InputSuccessConditionPort::SERIALIZED_SIZE];
      BYTE runPortSize[Svc::InputSchedPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Offset into data in buffer: Size of message ID and port number
          DATA_OFFSET = sizeof(FwEnumStoreType) + sizeof(FwIndexType),
          // Max data size
          MAX_DATA_SIZE = sizeof(BuffUnion),
          // Max message size: Size of message id + size of port + max data size
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    init(
        FwSizeType queueDepth,
        FwEnumStoreType instance
    )
  {
    // Initialize base class
    Fw::ActiveComponentBase::init(instance);

    // Connect input port buffQueueIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_buffQueueIn_InputPorts());
      port++
    ) {
      this->m_buffQueueIn_InputPort[port].init();
      this->m_buffQueueIn_InputPort[port].addCallComp(
        this,
        m_p_buffQueueIn_in
      );
      this->m_buffQueueIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_buffQueueIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_buffQueueIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port comQueueIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_comQueueIn_InputPorts());
      port++
    ) {
      this->m_comQueueIn_InputPort[port].init();
      this->m_comQueueIn_InputPort[port].addCallComp(
        this,
        m_p_comQueueIn_in
      );
      this->m_comQueueIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_comQueueIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_comQueueIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port comStatusIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_comStatusIn_InputPorts());
      port++
    ) {
      this->m_comStatusIn_InputPort[port].init();
      this->m_comStatusIn_InputPort[port].addCallComp(
        this,
        m_p_comStatusIn_in
      );
      this->m_comStatusIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_comStatusIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_comStatusIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port run
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_run_InputPorts());
      port++
    ) {
      this->m_run_InputPort[port].init();
      this->m_run_InputPort[port].addCallComp(
        this,
        m_p_run_in
      );
      this->m_run_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_run_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_run_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Log
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Log_OutputPorts());
      port++
    ) {
      this->m_Log_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Log_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port LogText
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_LogText_OutputPorts());
      port++
    ) {
      this->m_LogText_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_LogText_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port Time
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Time_OutputPorts());
      port++
    ) {
      this->m_Time_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Time_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Tlm
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Tlm_OutputPorts());
      port++
    ) {
      this->m_Tlm_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Tlm_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port buffQueueSend
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_buffQueueSend_OutputPorts());
      port++
    ) {
      this->m_buffQueueSend_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_buffQueueSend_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_buffQueueSend_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port comQueueSend
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_comQueueSend_OutputPorts());
      port++
    ) {
      this->m_comQueueSend_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_comQueueSend_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_comQueueSend_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port deallocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_deallocate_OutputPorts());
      port++
    ) {
      this->m_deallocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_deallocate_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_deallocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Create the queue
    Os::Queue::Status qStat = this->createQueue(
      queueDepth,
      static_cast<FwSizeType>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE)
    );
    FW_ASSERT(
      Os::Queue::Status::OP_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputBufferSendPort* ComQueueComponentBase ::
    get_buffQueueIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_buffQueueIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_buffQueueIn_InputPort[portNum];
  }

  Fw::InputComPort* ComQueueComponentBase ::
    get_comQueueIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_comQueueIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_comQueueIn_InputPort[portNum];
  }

  Fw::InputSuccessConditionPort* ComQueueComponentBase ::
    get_comStatusIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_comStatusIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_comStatusIn_InputPort[portNum];
  }

  Svc::InputSchedPort* ComQueueComponentBase ::
    get_run_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_run_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_run_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    set_Log_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Log_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void ComQueueComponentBase ::
    set_LogText_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LogText_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].addCallPort(port);
  }

#endif

  void ComQueueComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].addCallPort(port);
  }

  void ComQueueComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Tlm_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    set_buffQueueSend_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_buffQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_buffQueueSend_OutputPort[portNum].addCallPort(port);
  }

  void ComQueueComponentBase ::
    set_comQueueSend_OutputPort(
        FwIndexType portNum,
        Fw::InputComPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_comQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_comQueueSend_OutputPort[portNum].addCallPort(port);
  }

  void ComQueueComponentBase ::
    set_deallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_deallocate_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    set_Log_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Log_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void ComQueueComponentBase ::
    set_LogText_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LogText_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void ComQueueComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].registerSerialPort(port);
  }

  void ComQueueComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Tlm_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    set_buffQueueSend_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_buffQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_buffQueueSend_OutputPort[portNum].registerSerialPort(port);
  }

  void ComQueueComponentBase ::
    set_comQueueSend_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_comQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_comQueueSend_OutputPort[portNum].registerSerialPort(port);
  }

  void ComQueueComponentBase ::
    set_deallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_deallocate_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  ComQueueComponentBase ::
    ComQueueComponentBase(const char* compName) :
      Fw::ActiveComponentBase(compName)
  {

  }

  ComQueueComponentBase ::
    ~ComQueueComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType ComQueueComponentBase ::
    getNum_buffQueueIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_buffQueueIn_InputPort));
  }

  FwIndexType ComQueueComponentBase ::
    getNum_comQueueIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_comQueueIn_InputPort));
  }

  FwIndexType ComQueueComponentBase ::
    getNum_comStatusIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_comStatusIn_InputPort));
  }

  FwIndexType ComQueueComponentBase ::
    getNum_run_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_run_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType ComQueueComponentBase ::
    getNum_Log_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Log_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType ComQueueComponentBase ::
    getNum_LogText_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_LogText_OutputPort));
  }

#endif

  FwIndexType ComQueueComponentBase ::
    getNum_Time_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Time_OutputPort));
  }

  FwIndexType ComQueueComponentBase ::
    getNum_Tlm_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Tlm_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType ComQueueComponentBase ::
    getNum_buffQueueSend_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_buffQueueSend_OutputPort));
  }

  FwIndexType ComQueueComponentBase ::
    getNum_comQueueSend_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_comQueueSend_OutputPort));
  }

  FwIndexType ComQueueComponentBase ::
    getNum_deallocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_deallocate_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool ComQueueComponentBase ::
    isConnected_Log_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Log_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Log_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool ComQueueComponentBase ::
    isConnected_LogText_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_LogText_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_LogText_OutputPort[portNum].isConnected();
  }

#endif

  bool ComQueueComponentBase ::
    isConnected_Time_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Time_OutputPort[portNum].isConnected();
  }

  bool ComQueueComponentBase ::
    isConnected_Tlm_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Tlm_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Tlm_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool ComQueueComponentBase ::
    isConnected_buffQueueSend_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_buffQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_buffQueueSend_OutputPort[portNum].isConnected();
  }

  bool ComQueueComponentBase ::
    isConnected_comQueueSend_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_comQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_comQueueSend_OutputPort[portNum].isConnected();
  }

  bool ComQueueComponentBase ::
    isConnected_deallocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_deallocate_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    buffQueueIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_buffQueueIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    buffQueueIn_preMsgHook(
      portNum,
      fwBuffer
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(BUFFQUEUEIN_BUFFERSEND)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument fwBuffer
    _status = msg.serialize(fwBuffer);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    if (qStatus == Os::Queue::Status::FULL) {
      this->buffQueueIn_overflowHook(portNum, fwBuffer);
      return;
    }

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void ComQueueComponentBase ::
    comQueueIn_handlerBase(
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_comQueueIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    comQueueIn_preMsgHook(
      portNum,
      data,
      context
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(COMQUEUEIN_COM)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument data
    _status = msg.serialize(data);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument context
    _status = msg.serialize(context);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    if (qStatus == Os::Queue::Status::FULL) {
      this->incNumMsgDropped();
      return;
    }

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void ComQueueComponentBase ::
    comStatusIn_handlerBase(
        FwIndexType portNum,
        Fw::Success& condition
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_comStatusIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    comStatusIn_preMsgHook(
      portNum,
      condition
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(COMSTATUSIN_SUCCESSCONDITION)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument condition
    _status = msg.serialize(condition);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void ComQueueComponentBase ::
    run_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_run_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    run_preMsgHook(
      portNum,
      context
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(RUN_SCHED)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument context
    _status = msg.serialize(context);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    if (qStatus == Os::Queue::Status::FULL) {
      this->incNumMsgDropped();
      return;
    }

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for typed async input ports
  //
  // Each of these functions is invoked just before processing a message
  // on the corresponding port. By default, they do nothing. You can
  // override them to provide specific pre-message behavior.
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    buffQueueIn_preMsgHook(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    // Default: no-op
  }

  void ComQueueComponentBase ::
    comQueueIn_preMsgHook(
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    // Default: no-op
  }

  void ComQueueComponentBase ::
    comStatusIn_preMsgHook(
        FwIndexType portNum,
        Fw::Success& condition
    )
  {
    // Default: no-op
  }

  void ComQueueComponentBase ::
    run_preMsgHook(
        FwIndexType portNum,
        U32 context
    )
  {
    // Default: no-op
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    buffQueueSend_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_buffQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_buffQueueSend_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void ComQueueComponentBase ::
    comQueueSend_out(
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(
      portNum < this->getNum_comQueueSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_comQueueSend_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void ComQueueComponentBase ::
    deallocate_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_deallocate_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    log_WARNING_HI_QueueOverflow(
        Svc::QueueType queueType,
        U32 index
    ) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_QUEUEOVERFLOW;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Svc::QueueType::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(queueType);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(index);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: The %s queue at index %" PRIu32 " overflowed";
#else
      const char* _formatString =
        "%s: The %s queue at index %" PRIu32 " overflowed";
#endif

      Fw::String queueTypeStr;
      queueType.toString(queueTypeStr);

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "QueueOverflow ",
        queueTypeStr.toChar(),
        index
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    tlmWrite_comQueueDepth(
        const Svc::ComQueueDepth& arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_COMQUEUEDEPTH;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void ComQueueComponentBase ::
    tlmWrite_buffQueueDepth(
        const Svc::BuffQueueDepth& arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_BUFFQUEUEDEPTH;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time ComQueueComponentBase ::
    getTime()
  {
    if (this->m_Time_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_Time_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus ComQueueComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer msg;
    FwQueuePriorityType priority = 0;

    Os::Queue::Status msgStatus = this->m_queue.receive(
      msg,
      Os::Queue::BLOCKING,
      priority
    );
    FW_ASSERT(
      msgStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(msgStatus)
    );

    // Reset to beginning of buffer
    msg.resetDeser();

    FwEnumStoreType desMsg = 0;
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == COMQUEUE_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
    deserStatus = msg.deserialize(portNum);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    switch (msgType) {
      // Handle async input port buffQueueIn
      case BUFFQUEUEIN_BUFFERSEND: {
        // Deserialize argument fwBuffer
        Fw::Buffer fwBuffer;
        deserStatus = msg.deserialize(fwBuffer);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->buffQueueIn_handler(
          portNum,
          fwBuffer
        );

        break;
      }

      // Handle async input port comQueueIn
      case COMQUEUEIN_COM: {
        // Deserialize argument data
        Fw::ComBuffer data;
        deserStatus = msg.deserialize(data);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );

        // Deserialize argument context
        U32 context;
        deserStatus = msg.deserialize(context);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->comQueueIn_handler(
          portNum,
          data,
          context
        );

        break;
      }

      // Handle async input port comStatusIn
      case COMSTATUSIN_SUCCESSCONDITION: {
        // Deserialize argument condition
        Fw::Success condition;
        deserStatus = msg.deserialize(condition);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->comStatusIn_handler(
          portNum,
          condition
        );

        break;
      }

      // Handle async input port run
      case RUN_SCHED: {
        // Deserialize argument context
        U32 context;
        deserStatus = msg.deserialize(context);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->run_handler(
          portNum,
          context
        );

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void ComQueueComponentBase ::
    m_p_buffQueueIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(callComp);
    ComQueueComponentBase* compPtr = static_cast<ComQueueComponentBase*>(callComp);
    compPtr->buffQueueIn_handlerBase(
      portNum,
      fwBuffer
    );
  }

  void ComQueueComponentBase ::
    m_p_comQueueIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    ComQueueComponentBase* compPtr = static_cast<ComQueueComponentBase*>(callComp);
    compPtr->comQueueIn_handlerBase(
      portNum,
      data,
      context
    );
  }

  void ComQueueComponentBase ::
    m_p_comStatusIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Success& condition
    )
  {
    FW_ASSERT(callComp);
    ComQueueComponentBase* compPtr = static_cast<ComQueueComponentBase*>(callComp);
    compPtr->comStatusIn_handlerBase(
      portNum,
      condition
    );
  }

  void ComQueueComponentBase ::
    m_p_run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    ComQueueComponentBase* compPtr = static_cast<ComQueueComponentBase*>(callComp);
    compPtr->run_handlerBase(
      portNum,
      context
    );
  }

}
