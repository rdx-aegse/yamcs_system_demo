<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
DpWriterComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Svc" name="DpWriter" kind="active">

  <comment>
  A component for writing data products to disk
  </comment>

  <import_port_type>Fw/Buffer/BufferSendPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
  <import_port_type>Svc/DpPorts/DpWrittenPortAi.xml</import_port_type>
  <import_port_type>Svc/Sched/SchedPortAi.xml</import_port_type>

  <ports>
    <port name="bufferSendIn" data_type="Fw::BufferSend" kind="async_input" max_number="1" full="assert">
      <comment>
      Port for receiving data products to write to disk
      </comment>
    </port>
    <port name="cmdIn" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Command receive port
      </comment>
    </port>
    <port name="cmdRegIn" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Command registration port
      </comment>
    </port>
    <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Command response port
      </comment>
    </port>
    <port name="deallocBufferSendOut" data_type="Fw::BufferSend" kind="output" max_number="1">
      <comment>
      Port for deallocating data product buffers
      </comment>
    </port>
    <port name="dpWrittenOut" data_type="Svc::DpWritten" kind="output" max_number="1">
      <comment>
      Port for sending DpWritten notifications
      </comment>
    </port>
    <port name="eventOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Event port
      </comment>
    </port>
    <port name="procBufferSendOut" data_type="Fw::BufferSend" kind="output" max_number="5">
      <comment>
      Port for processing data products
      </comment>
    </port>
    <port name="schedIn" data_type="Svc::Sched" kind="async_input" max_number="1" full="assert">
      <comment>
      Schedule in port
      </comment>
    </port>
    <port name="textEventOut" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Text event port
      </comment>
    </port>
    <port name="timeGetOut" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      Time get port
      </comment>
    </port>
    <port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
      <comment>
      Telemetry port
      </comment>
    </port>
  </ports>

  <commands>
    <command kind="async" opcode="0x0" mnemonic="CLEAR_EVENT_THROTTLE" full="assert">
      <comment>
      Clear event throttling
      </comment>
    </command>
  </commands>

  <events>
    <event id="0x0" name="InvalidBuffer" severity="WARNING_HI" format_string="Received buffer is invalid" throttle="10">
      <comment>
      Received buffer is invalid
      </comment>
    </event>
    <event id="0x1" name="BufferTooSmallForPacket" severity="WARNING_HI" format_string="Received buffer has size %u; minimum required size is %u" throttle="10">
      <comment>
      Received buffer is too small to hold a data product packet
      </comment>
      <args>
        <arg name="bufferSize" type="U32">
          <comment>
          The incoming buffer size
          </comment>
        </arg>
        <arg name="minSize" type="U32">
          <comment>
          The minimum required size
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x2" name="InvalidHeaderHash" severity="WARNING_HI" format_string="Received a buffer of size %u with an invalid header hash (stored %x, computed %x)" throttle="10">
      <comment>
      The received buffer has an invalid header hash
      </comment>
      <args>
        <arg name="bufferSize" type="U32">
          <comment>
          The incoming buffer size
          </comment>
        </arg>
        <arg name="storedHash" type="U32">
          <comment>
          The stored hash value
          </comment>
        </arg>
        <arg name="computedHash" type="U32">
          <comment>
          The computed hash value
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x3" name="InvalidHeader" severity="WARNING_HI" format_string="Received buffer of size %u; deserialization of packet header failed with error code %u" throttle="10">
      <comment>
      Error occurred when deserializing the packet header
      </comment>
      <args>
        <arg name="bufferSize" type="U32">
          <comment>
          The incoming buffer size
          </comment>
        </arg>
        <arg name="errorCode" type="U32">
          <comment>
          The error code
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x4" name="BufferTooSmallForData" severity="WARNING_HI" format_string="Received buffer has size %u; minimum required size is %u" throttle="10">
      <comment>
      Received buffer is too small to hold the data specified in the header
      </comment>
      <args>
        <arg name="bufferSize" type="U32">
          <comment>
          The incoming buffer size
          </comment>
        </arg>
        <arg name="minSize" type="U32">
          <comment>
          The minimum required size
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x5" name="FileOpenError" severity="WARNING_HI" format_string="Error %u opening file %s" throttle="10">
      <comment>
      An error occurred when opening a file
      </comment>
      <args>
        <arg name="status" type="U32">
          <comment>
          The status code returned from the open operation
          </comment>
        </arg>
        <arg name="file" type="string" size="200">
          <comment>
          The file
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x6" name="FileWriteError" severity="WARNING_HI" format_string="Error %u while writing %u of %u bytes to %s" throttle="10">
      <comment>
      An error occurred when writing to a file
      </comment>
      <args>
        <arg name="status" type="U32">
          <comment>
          The status code returned from the write operation
          </comment>
        </arg>
        <arg name="bytesWritten" type="U32">
          <comment>
          The number of bytes successfully written
          </comment>
        </arg>
        <arg name="bytesToWrite" type="U32">
          <comment>
          The number of bytes attempted
          </comment>
        </arg>
        <arg name="file" type="string" size="200">
          <comment>
          The file
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x7" name="FileWritten" severity="ACTIVITY_LO" format_string="Wrote %u bytes to file %s">
      <comment>
      File written
      </comment>
      <args>
        <arg name="bytes" type="U32">
          <comment>
          The number of bytes written
          </comment>
        </arg>
        <arg name="file" type="string" size="200">
          <comment>
          The file name
          </comment>
        </arg>
      </args>
    </event>
  </events>

  <telemetry>
    <channel id="0x0" name="NumBuffersReceived" data_type="U32" update="on_change">
      <comment>
      The number of buffers received
      </comment>
    </channel>
    <channel id="0x1" name="NumBytesWritten" data_type="U64" update="on_change">
      <comment>
      The number of bytes written
      </comment>
    </channel>
    <channel id="0x2" name="NumSuccessfulWrites" data_type="U32" update="on_change">
      <comment>
      The number of successful writes
      </comment>
    </channel>
    <channel id="0x3" name="NumFailedWrites" data_type="U32" update="on_change">
      <comment>
      The number of failed writes
      </comment>
    </channel>
    <channel id="0x4" name="NumErrors" data_type="U32" update="on_change">
      <comment>
      The number of errors
      </comment>
    </channel>
  </telemetry>

</component>
