// ======================================================================
// \title  DpWriterComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpWriter component base class
// ======================================================================

#ifndef Svc_DpWriterComponentAc_HPP
#define Svc_DpWriterComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Svc/DpPorts/DpWrittenPortAc.hpp"
#include "Svc/Sched/SchedPortAc.hpp"

namespace Svc {

  //! \class DpWriterComponentBase
  //! \brief Auto-generated base for DpWriter component
  //!
  //! A component for writing data products to disk
  class DpWriterComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class DpWriterComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_BUFFERSENDIN_INPUT_PORTS = 1,
        NUM_SCHEDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGIN_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_EVENTOUT_OUTPUT_PORTS = 1,
        NUM_TEXTEVENTOUT_OUTPUT_PORTS = 1,
        NUM_TIMEGETOUT_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_DEALLOCBUFFERSENDOUT_OUTPUT_PORTS = 1,
        NUM_DPWRITTENOUT_OUTPUT_PORTS = 1,
        NUM_PROCBUFFERSENDOUT_OUTPUT_PORTS = 5,
      };

      //! Command opcodes
      enum {
        OPCODE_CLEAR_EVENT_THROTTLE = 0x0, //!< Clear event throttling
      };

      //! Event IDs
      enum {
        EVENTID_INVALIDBUFFER = 0x0, //!< Received buffer is invalid
        EVENTID_BUFFERTOOSMALLFORPACKET = 0x1, //!< Received buffer is too small to hold a data product packet
        EVENTID_INVALIDHEADERHASH = 0x2, //!< The received buffer has an invalid header hash
        EVENTID_INVALIDHEADER = 0x3, //!< Error occurred when deserializing the packet header
        EVENTID_BUFFERTOOSMALLFORDATA = 0x4, //!< Received buffer is too small to hold the data specified in the header
        EVENTID_FILEOPENERROR = 0x5, //!< An error occurred when opening a file
        EVENTID_FILEWRITEERROR = 0x6, //!< An error occurred when writing to a file
        EVENTID_FILEWRITTEN = 0x7, //!< File written
      };

      //! Event throttle values: sets initial value of countdown variables
      enum {
        EVENTID_INVALIDBUFFER_THROTTLE = 10, //!< Throttle reset count for InvalidBuffer
        EVENTID_BUFFERTOOSMALLFORPACKET_THROTTLE = 10, //!< Throttle reset count for BufferTooSmallForPacket
        EVENTID_INVALIDHEADERHASH_THROTTLE = 10, //!< Throttle reset count for InvalidHeaderHash
        EVENTID_INVALIDHEADER_THROTTLE = 10, //!< Throttle reset count for InvalidHeader
        EVENTID_BUFFERTOOSMALLFORDATA_THROTTLE = 10, //!< Throttle reset count for BufferTooSmallForData
        EVENTID_FILEOPENERROR_THROTTLE = 10, //!< Throttle reset count for FileOpenError
        EVENTID_FILEWRITEERROR_THROTTLE = 10, //!< Throttle reset count for FileWriteError
      };

      //! Channel IDs
      enum {
        CHANNELID_NUMBUFFERSRECEIVED = 0x0, //!< Channel ID for NumBuffersReceived
        CHANNELID_NUMBYTESWRITTEN = 0x1, //!< Channel ID for NumBytesWritten
        CHANNELID_NUMSUCCESSFULWRITES = 0x2, //!< Channel ID for NumSuccessfulWrites
        CHANNELID_NUMFAILEDWRITES = 0x3, //!< Channel ID for NumFailedWrites
        CHANNELID_NUMERRORS = 0x4, //!< Channel ID for NumErrors
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize DpWriterComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return bufferSendIn[portNum]
      Fw::InputBufferSendPort* get_bufferSendIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return schedIn[portNum]
      Svc::InputSchedPort* get_schedIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegIn[portNum]
      void set_cmdRegIn_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to eventOut[portNum]
      void set_eventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to textEventOut[portNum]
      void set_textEventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to timeGetOut[portNum]
      void set_timeGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to deallocBufferSendOut[portNum]
      void set_deallocBufferSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to dpWrittenOut[portNum]
      void set_dpWrittenOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputDpWrittenPort* port //!< The input port
      );

      //! Connect port to procBufferSendOut[portNum]
      void set_procBufferSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegIn[portNum]
      void set_cmdRegIn_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to eventOut[portNum]
      void set_eventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to textEventOut[portNum]
      void set_textEventOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to timeGetOut[portNum]
      void set_timeGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to deallocBufferSendOut[portNum]
      void set_deallocBufferSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dpWrittenOut[portNum]
      void set_dpWrittenOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to procBufferSendOut[portNum]
      void set_procBufferSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct DpWriterComponentBase object
      DpWriterComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy DpWriterComponentBase object
      virtual ~DpWriterComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      FwIndexType getNum_cmdIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of bufferSendIn input ports
      //!
      //! \return The number of bufferSendIn input ports
      FwIndexType getNum_bufferSendIn_InputPorts() const;

      //! Get the number of schedIn input ports
      //!
      //! \return The number of schedIn input ports
      FwIndexType getNum_schedIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegIn output ports
      //!
      //! \return The number of cmdRegIn output ports
      FwIndexType getNum_cmdRegIn_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      FwIndexType getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of eventOut output ports
      //!
      //! \return The number of eventOut output ports
      FwIndexType getNum_eventOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of textEventOut output ports
      //!
      //! \return The number of textEventOut output ports
      FwIndexType getNum_textEventOut_OutputPorts() const;

#endif

      //! Get the number of timeGetOut output ports
      //!
      //! \return The number of timeGetOut output ports
      FwIndexType getNum_timeGetOut_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      FwIndexType getNum_tlmOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of deallocBufferSendOut output ports
      //!
      //! \return The number of deallocBufferSendOut output ports
      FwIndexType getNum_deallocBufferSendOut_OutputPorts() const;

      //! Get the number of dpWrittenOut output ports
      //!
      //! \return The number of dpWrittenOut output ports
      FwIndexType getNum_dpWrittenOut_OutputPorts() const;

      //! Get the number of procBufferSendOut output ports
      //!
      //! \return The number of procBufferSendOut output ports
      FwIndexType getNum_procBufferSendOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegIn is connected
      //!
      //! \return Whether port cmdRegIn is connected
      bool isConnected_cmdRegIn_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port eventOut is connected
      //!
      //! \return Whether port eventOut is connected
      bool isConnected_eventOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port textEventOut is connected
      //!
      //! \return Whether port textEventOut is connected
      bool isConnected_textEventOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port timeGetOut is connected
      //!
      //! \return Whether port timeGetOut is connected
      bool isConnected_timeGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port deallocBufferSendOut is connected
      //!
      //! \return Whether port deallocBufferSendOut is connected
      bool isConnected_deallocBufferSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port dpWrittenOut is connected
      //!
      //! \return Whether port dpWrittenOut is connected
      bool isConnected_dpWrittenOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port procBufferSendOut is connected
      //!
      //! \return Whether port procBufferSendOut is connected
      bool isConnected_procBufferSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port bufferSendIn
      virtual void bufferSendIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      ) = 0;

      //! Handler for input port schedIn
      virtual void schedIn_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port bufferSendIn
      void bufferSendIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Handler base-class function for input port schedIn
      void schedIn_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for typed async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port bufferSendIn
      virtual void bufferSendIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Pre-message hook for async input port schedIn
      virtual void schedIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port deallocBufferSendOut
      void deallocBufferSendOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Invoke output port dpWrittenOut
      void dpWrittenOut_out(
          FwIndexType portNum, //!< The port number
          const Fw::StringBase& fileName, //!< The file name
          FwDpPriorityType priority, //!< The priority
          FwSizeType size //!< The file size
      );

      //! Invoke output port procBufferSendOut
      void procBufferSendOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command CLEAR_EVENT_THROTTLE
      //!
      //! Clear event throttling
      virtual void CLEAR_EVENT_THROTTLE_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command CLEAR_EVENT_THROTTLE
      //!
      //! Clear event throttling
      void CLEAR_EVENT_THROTTLE_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for async commands
      //
      // Each of these functions is invoked just before processing the
      // corresponding command. By default they do nothing. You can
      // override them to provide specific pre-command behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for command CLEAR_EVENT_THROTTLE
      virtual void CLEAR_EVENT_THROTTLE_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event InvalidBuffer
      //!
      //! Received buffer is invalid
      void log_WARNING_HI_InvalidBuffer();

      //! Log event BufferTooSmallForPacket
      //!
      //! Received buffer is too small to hold a data product packet
      void log_WARNING_HI_BufferTooSmallForPacket(
          U32 bufferSize, //!< The incoming buffer size
          U32 minSize //!< The minimum required size
      );

      //! Log event InvalidHeaderHash
      //!
      //! The received buffer has an invalid header hash
      void log_WARNING_HI_InvalidHeaderHash(
          U32 bufferSize, //!< The incoming buffer size
          U32 storedHash, //!< The stored hash value
          U32 computedHash //!< The computed hash value
      );

      //! Log event InvalidHeader
      //!
      //! Error occurred when deserializing the packet header
      void log_WARNING_HI_InvalidHeader(
          U32 bufferSize, //!< The incoming buffer size
          U32 errorCode //!< The error code
      );

      //! Log event BufferTooSmallForData
      //!
      //! Received buffer is too small to hold the data specified in the header
      void log_WARNING_HI_BufferTooSmallForData(
          U32 bufferSize, //!< The incoming buffer size
          U32 minSize //!< The minimum required size
      );

      //! Log event FileOpenError
      //!
      //! An error occurred when opening a file
      void log_WARNING_HI_FileOpenError(
          U32 status, //!< The status code returned from the open operation
          const Fw::StringBase& file //!< The file
      );

      //! Log event FileWriteError
      //!
      //! An error occurred when writing to a file
      void log_WARNING_HI_FileWriteError(
          U32 status, //!< The status code returned from the write operation
          U32 bytesWritten, //!< The number of bytes successfully written
          U32 bytesToWrite, //!< The number of bytes attempted
          const Fw::StringBase& file //!< The file
      );

      //! Log event FileWritten
      //!
      //! File written
      void log_ACTIVITY_LO_FileWritten(
          U32 bytes, //!< The number of bytes written
          const Fw::StringBase& file //!< The file name
      ) const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event throttle reset functions
      // ----------------------------------------------------------------------

      //! Reset throttle value for InvalidBuffer
      void log_WARNING_HI_InvalidBuffer_ThrottleClear();

      //! Reset throttle value for BufferTooSmallForPacket
      void log_WARNING_HI_BufferTooSmallForPacket_ThrottleClear();

      //! Reset throttle value for InvalidHeaderHash
      void log_WARNING_HI_InvalidHeaderHash_ThrottleClear();

      //! Reset throttle value for InvalidHeader
      void log_WARNING_HI_InvalidHeader_ThrottleClear();

      //! Reset throttle value for BufferTooSmallForData
      void log_WARNING_HI_BufferTooSmallForData_ThrottleClear();

      //! Reset throttle value for FileOpenError
      void log_WARNING_HI_FileOpenError_ThrottleClear();

      //! Reset throttle value for FileWriteError
      void log_WARNING_HI_FileWriteError_ThrottleClear();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel NumBuffersReceived
      //!
      //! The number of buffers received
      void tlmWrite_NumBuffersReceived(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumBytesWritten
      //!
      //! The number of bytes written
      void tlmWrite_NumBytesWritten(
          U64 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumSuccessfulWrites
      //!
      //! The number of successful writes
      void tlmWrite_NumSuccessfulWrites(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumFailedWrites
      //!
      //! The number of failed writes
      void tlmWrite_NumFailedWrites(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel NumErrors
      //!
      //! The number of errors
      void tlmWrite_NumErrors(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port bufferSendIn
      static void m_p_bufferSendIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Callback for port schedIn
      static void m_p_schedIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port bufferSendIn
      Fw::InputBufferSendPort m_bufferSendIn_InputPort[NUM_BUFFERSENDIN_INPUT_PORTS];

      //! Input port schedIn
      Svc::InputSchedPort m_schedIn_InputPort[NUM_SCHEDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegIn
      Fw::OutputCmdRegPort m_cmdRegIn_OutputPort[NUM_CMDREGIN_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port eventOut
      Fw::OutputLogPort m_eventOut_OutputPort[NUM_EVENTOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port textEventOut
      Fw::OutputLogTextPort m_textEventOut_OutputPort[NUM_TEXTEVENTOUT_OUTPUT_PORTS];

#endif

      //! Output port timeGetOut
      Fw::OutputTimePort m_timeGetOut_OutputPort[NUM_TIMEGETOUT_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port deallocBufferSendOut
      Fw::OutputBufferSendPort m_deallocBufferSendOut_OutputPort[NUM_DEALLOCBUFFERSENDOUT_OUTPUT_PORTS];

      //! Output port dpWrittenOut
      Svc::OutputDpWrittenPort m_dpWrittenOut_OutputPort[NUM_DPWRITTENOUT_OUTPUT_PORTS];

      //! Output port procBufferSendOut
      Fw::OutputBufferSendPort m_procBufferSendOut_OutputPort[NUM_PROCBUFFERSENDOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Counter values for event throttling
      // ----------------------------------------------------------------------

      //! Throttle for InvalidBuffer
      FwIndexType m_InvalidBufferThrottle;

      //! Throttle for BufferTooSmallForPacket
      FwIndexType m_BufferTooSmallForPacketThrottle;

      //! Throttle for InvalidHeaderHash
      FwIndexType m_InvalidHeaderHashThrottle;

      //! Throttle for InvalidHeader
      FwIndexType m_InvalidHeaderThrottle;

      //! Throttle for BufferTooSmallForData
      FwIndexType m_BufferTooSmallForDataThrottle;

      //! Throttle for FileOpenError
      FwIndexType m_FileOpenErrorThrottle;

      //! Throttle for FileWriteError
      FwIndexType m_FileWriteErrorThrottle;

    PRIVATE:

      // ----------------------------------------------------------------------
      // First update flags for telemetry channels
      // ----------------------------------------------------------------------

      //! Initialized to true; cleared when channel NumBuffersReceived is first updated
      bool m_first_update_NumBuffersReceived;

      //! Initialized to true; cleared when channel NumBytesWritten is first updated
      bool m_first_update_NumBytesWritten;

      //! Initialized to true; cleared when channel NumSuccessfulWrites is first updated
      bool m_first_update_NumSuccessfulWrites;

      //! Initialized to true; cleared when channel NumFailedWrites is first updated
      bool m_first_update_NumFailedWrites;

      //! Initialized to true; cleared when channel NumErrors is first updated
      bool m_first_update_NumErrors;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Last value storage for telemetry channels
      // ----------------------------------------------------------------------

      //! Records the last emitted value for channel NumBuffersReceived
      U32 m_last_NumBuffersReceived;

      //! Records the last emitted value for channel NumBytesWritten
      U64 m_last_NumBytesWritten;

      //! Records the last emitted value for channel NumSuccessfulWrites
      U32 m_last_NumSuccessfulWrites;

      //! Records the last emitted value for channel NumFailedWrites
      U32 m_last_NumFailedWrites;

      //! Records the last emitted value for channel NumErrors
      U32 m_last_NumErrors;

  };

}

#endif
