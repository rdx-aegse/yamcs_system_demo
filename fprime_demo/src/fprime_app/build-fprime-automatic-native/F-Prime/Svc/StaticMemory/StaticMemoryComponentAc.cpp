// ======================================================================
// \title  StaticMemoryComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for StaticMemory component base class
// ======================================================================

#include "F-Prime/Svc/StaticMemory/StaticMemoryComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void StaticMemoryComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port bufferAllocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferAllocate_InputPorts());
      port++
    ) {
      this->m_bufferAllocate_InputPort[port].init();
      this->m_bufferAllocate_InputPort[port].addCallComp(
        this,
        m_p_bufferAllocate_in
      );
      this->m_bufferAllocate_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferAllocate_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferAllocate_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port bufferDeallocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferDeallocate_InputPorts());
      port++
    ) {
      this->m_bufferDeallocate_InputPort[port].init();
      this->m_bufferDeallocate_InputPort[port].addCallComp(
        this,
        m_p_bufferDeallocate_in
      );
      this->m_bufferDeallocate_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferDeallocate_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferDeallocate_InputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputBufferGetPort* StaticMemoryComponentBase ::
    get_bufferAllocate_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_bufferAllocate_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_bufferAllocate_InputPort[portNum];
  }

  Fw::InputBufferSendPort* StaticMemoryComponentBase ::
    get_bufferDeallocate_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_bufferDeallocate_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_bufferDeallocate_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  StaticMemoryComponentBase ::
    StaticMemoryComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  StaticMemoryComponentBase ::
    ~StaticMemoryComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType StaticMemoryComponentBase ::
    getNum_bufferAllocate_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferAllocate_InputPort));
  }

  FwIndexType StaticMemoryComponentBase ::
    getNum_bufferDeallocate_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferDeallocate_InputPort));
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  Fw::Buffer StaticMemoryComponentBase ::
    bufferAllocate_handlerBase(
        FwIndexType portNum,
        U32 size
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_bufferAllocate_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    Fw::Buffer retVal;

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    retVal = this->bufferAllocate_handler(
      portNum,
      size
    );

    // Unlock guard mutex
    this->unLock();

    return retVal;
  }

  void StaticMemoryComponentBase ::
    bufferDeallocate_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_bufferDeallocate_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    this->bufferDeallocate_handler(
      portNum,
      fwBuffer
    );

    // Unlock guard mutex
    this->unLock();
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void StaticMemoryComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void StaticMemoryComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  Fw::Buffer StaticMemoryComponentBase ::
    m_p_bufferAllocate_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 size
    )
  {
    FW_ASSERT(callComp);
    StaticMemoryComponentBase* compPtr = static_cast<StaticMemoryComponentBase*>(callComp);
    return compPtr->bufferAllocate_handlerBase(
      portNum,
      size
    );
  }

  void StaticMemoryComponentBase ::
    m_p_bufferDeallocate_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(callComp);
    StaticMemoryComponentBase* compPtr = static_cast<StaticMemoryComponentBase*>(callComp);
    compPtr->bufferDeallocate_handlerBase(
      portNum,
      fwBuffer
    );
  }

}
