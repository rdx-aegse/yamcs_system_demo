// ======================================================================
// \title  TlmChanComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TlmChan component base class
// ======================================================================

#include "F-Prime/Svc/TlmChan/TlmChanComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  namespace {
    enum MsgTypeEnum {
      TLMCHAN_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      RUN_SCHED,
      PINGIN_PING,
    };

    // Get the max size by constructing a union of the async input, command, and
    // internal port serialization sizes
    union BuffUnion {
      BYTE RunPortSize[Svc::InputSchedPort::SERIALIZED_SIZE];
      BYTE pingInPortSize[Svc::InputPingPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Offset into data in buffer: Size of message ID and port number
          DATA_OFFSET = sizeof(FwEnumStoreType) + sizeof(FwIndexType),
          // Max data size
          MAX_DATA_SIZE = sizeof(BuffUnion),
          // Max message size: Size of message id + size of port + max data size
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    init(
        FwSizeType queueDepth,
        FwEnumStoreType instance
    )
  {
    // Initialize base class
    Fw::ActiveComponentBase::init(instance);

    // Connect input port Run
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Run_InputPorts());
      port++
    ) {
      this->m_Run_InputPort[port].init();
      this->m_Run_InputPort[port].addCallComp(
        this,
        m_p_Run_in
      );
      this->m_Run_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Run_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Run_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port TlmGet
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_TlmGet_InputPorts());
      port++
    ) {
      this->m_TlmGet_InputPort[port].init();
      this->m_TlmGet_InputPort[port].addCallComp(
        this,
        m_p_TlmGet_in
      );
      this->m_TlmGet_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_TlmGet_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_TlmGet_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port TlmRecv
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_TlmRecv_InputPorts());
      port++
    ) {
      this->m_TlmRecv_InputPort[port].init();
      this->m_TlmRecv_InputPort[port].addCallComp(
        this,
        m_p_TlmRecv_in
      );
      this->m_TlmRecv_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_TlmRecv_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_TlmRecv_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port pingIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_pingIn_InputPorts());
      port++
    ) {
      this->m_pingIn_InputPort[port].init();
      this->m_pingIn_InputPort[port].addCallComp(
        this,
        m_p_pingIn_in
      );
      this->m_pingIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_pingIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port PktSend
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_PktSend_OutputPorts());
      port++
    ) {
      this->m_PktSend_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_PktSend_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_PktSend_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port pingOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_pingOut_OutputPorts());
      port++
    ) {
      this->m_pingOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_pingOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_pingOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Create the queue
    Os::Queue::Status qStat = this->createQueue(
      queueDepth,
      static_cast<FwSizeType>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE)
    );
    FW_ASSERT(
      Os::Queue::Status::OP_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputSchedPort* TlmChanComponentBase ::
    get_Run_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Run_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_Run_InputPort[portNum];
  }

  Fw::InputTlmGetPort* TlmChanComponentBase ::
    get_TlmGet_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_TlmGet_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_TlmGet_InputPort[portNum];
  }

  Fw::InputTlmPort* TlmChanComponentBase ::
    get_TlmRecv_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_TlmRecv_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_TlmRecv_InputPort[portNum];
  }

  Svc::InputPingPort* TlmChanComponentBase ::
    get_pingIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_pingIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_pingIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    set_PktSend_OutputPort(
        FwIndexType portNum,
        Fw::InputComPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_PktSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_PktSend_OutputPort[portNum].addCallPort(port);
  }

  void TlmChanComponentBase ::
    set_pingOut_OutputPort(
        FwIndexType portNum,
        Svc::InputPingPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_pingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_pingOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    set_PktSend_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_PktSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_PktSend_OutputPort[portNum].registerSerialPort(port);
  }

  void TlmChanComponentBase ::
    set_pingOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_pingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_pingOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  TlmChanComponentBase ::
    TlmChanComponentBase(const char* compName) :
      Fw::ActiveComponentBase(compName)
  {

  }

  TlmChanComponentBase ::
    ~TlmChanComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType TlmChanComponentBase ::
    getNum_Run_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Run_InputPort));
  }

  FwIndexType TlmChanComponentBase ::
    getNum_TlmGet_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_TlmGet_InputPort));
  }

  FwIndexType TlmChanComponentBase ::
    getNum_TlmRecv_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_TlmRecv_InputPort));
  }

  FwIndexType TlmChanComponentBase ::
    getNum_pingIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_pingIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType TlmChanComponentBase ::
    getNum_PktSend_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_PktSend_OutputPort));
  }

  FwIndexType TlmChanComponentBase ::
    getNum_pingOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_pingOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool TlmChanComponentBase ::
    isConnected_PktSend_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_PktSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_PktSend_OutputPort[portNum].isConnected();
  }

  bool TlmChanComponentBase ::
    isConnected_pingOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_pingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_pingOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    Run_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_Run_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    Run_preMsgHook(
      portNum,
      context
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(RUN_SCHED)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument context
    _status = msg.serialize(context);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void TlmChanComponentBase ::
    TlmGet_handlerBase(
        FwIndexType portNum,
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_TlmGet_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    this->TlmGet_handler(
      portNum,
      id,
      timeTag,
      val
    );

    // Unlock guard mutex
    this->unLock();
  }

  void TlmChanComponentBase ::
    TlmRecv_handlerBase(
        FwIndexType portNum,
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_TlmRecv_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    this->TlmRecv_handler(
      portNum,
      id,
      timeTag,
      val
    );

    // Unlock guard mutex
    this->unLock();
  }

  void TlmChanComponentBase ::
    pingIn_handlerBase(
        FwIndexType portNum,
        U32 key
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_pingIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    pingIn_preMsgHook(
      portNum,
      key
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<FwEnumStoreType>(PINGIN_PING)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument key
    _status = msg.serialize(key);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for typed async input ports
  //
  // Each of these functions is invoked just before processing a message
  // on the corresponding port. By default, they do nothing. You can
  // override them to provide specific pre-message behavior.
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    Run_preMsgHook(
        FwIndexType portNum,
        U32 context
    )
  {
    // Default: no-op
  }

  void TlmChanComponentBase ::
    pingIn_preMsgHook(
        FwIndexType portNum,
        U32 key
    )
  {
    // Default: no-op
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    PktSend_out(
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(
      portNum < this->getNum_PktSend_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_PktSend_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void TlmChanComponentBase ::
    pingOut_out(
        FwIndexType portNum,
        U32 key
    )
  {
    FW_ASSERT(
      portNum < this->getNum_pingOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_pingOut_OutputPort[portNum].invoke(
      key
    );
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void TlmChanComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus TlmChanComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer msg;
    FwQueuePriorityType priority = 0;

    Os::Queue::Status msgStatus = this->m_queue.receive(
      msg,
      Os::Queue::BLOCKING,
      priority
    );
    FW_ASSERT(
      msgStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(msgStatus)
    );

    // Reset to beginning of buffer
    msg.resetDeser();

    FwEnumStoreType desMsg = 0;
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == TLMCHAN_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
    deserStatus = msg.deserialize(portNum);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    switch (msgType) {
      // Handle async input port Run
      case RUN_SCHED: {
        // Deserialize argument context
        U32 context;
        deserStatus = msg.deserialize(context);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->Run_handler(
          portNum,
          context
        );

        break;
      }

      // Handle async input port pingIn
      case PINGIN_PING: {
        // Deserialize argument key
        U32 key;
        deserStatus = msg.deserialize(key);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->pingIn_handler(
          portNum,
          key
        );

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    m_p_Run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->Run_handlerBase(
      portNum,
      context
    );
  }

  void TlmChanComponentBase ::
    m_p_TlmGet_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
    FW_ASSERT(callComp);
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->TlmGet_handlerBase(
      portNum,
      id,
      timeTag,
      val
    );
  }

  void TlmChanComponentBase ::
    m_p_TlmRecv_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
    FW_ASSERT(callComp);
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->TlmRecv_handlerBase(
      portNum,
      id,
      timeTag,
      val
    );
  }

  void TlmChanComponentBase ::
    m_p_pingIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 key
    )
  {
    FW_ASSERT(callComp);
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->pingIn_handlerBase(
      portNum,
      key
    );
  }

}
