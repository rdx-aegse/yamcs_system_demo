// ======================================================================
// \title  FileSystemStatusEnumAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for FileSystemStatus enum
// ======================================================================

#ifndef Os_FileSystemStatusEnumAc_HPP
#define Os_FileSystemStatusEnumAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Os {

  //! FPP shadow-enum representing Os::FileSystem::Status
  class FileSystemStatus :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The serial representation type
      typedef I32 SerialType;

      //! The raw enum type
      enum T {
        //! Operation was successful
        OP_OK = 0,
        //! File already exists
        ALREADY_EXISTS = 1,
        //! No space left
        NO_SPACE = 2,
        //! No permission to write
        NO_PERMISSION = 3,
        //! Path is not a directory
        NOT_DIR = 4,
        //! Path is a directory
        IS_DIR = 5,
        //! directory is not empty
        NOT_EMPTY = 6,
        //! Path is too long, too many sym links, etc.
        INVALID_PATH = 7,
        //! Path doesn't exist
        DOESNT_EXIST = 8,
        //! Too many files or links
        FILE_LIMIT = 9,
        //! Operand is in use by the system or by a process
        BUSY = 10,
        //! Directory stream has no more files
        NO_MORE_FILES = 11,
        //! Buffer size is too small to hold full path (for getWorkingDirectory)
        BUFFER_TOO_SMALL = 12,
        //! Operation not supported across devices (e.g. rename)
        EXDEV_ERROR = 13,
        //! Operation failed due to overflow in calculation of the result
        OVERFLOW_ERROR = 14,
        //! Operation is not supported by the current implementation
        NOT_SUPPORTED = 15,
        //! other OS-specific error
        OTHER_ERROR = 16,
      };

      //! For backwards compatibility
      typedef T t;

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE = sizeof(SerialType),
        //! The number of enumerated constants
        NUM_CONSTANTS = 17,
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value of OP_OK)
      FileSystemStatus()
      {
        this->e = OP_OK;
      }

      //! Constructor (user-provided value)
      FileSystemStatus(
          const T e1 //!< The raw enum value
      )
      {
        this->e = e1;
      }

      //! Copy constructor
      FileSystemStatus(
          const FileSystemStatus& obj //!< The source object
      )
      {
        this->e = obj.e;
      }

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator (object)
      FileSystemStatus& operator=(
          const FileSystemStatus& obj //!< The source object
      );

      //! Copy assignment operator (raw enum)
      FileSystemStatus& operator=(
          T e1 //!< The enum value
      );

      //! Conversion operator
      operator T() const
      {
        return this->e;
      }

      //! Equality operator
      bool operator==(T e1) const
      {
        return this->e == e1;
      }

      //! Inequality operator
      bool operator!=(T e1) const
      {
        return !(*this == e1);
      }

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const FileSystemStatus& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Check raw enum value for validity
      bool isValid() const;

      //! Serialize raw enum value to SerialType
      Fw::SerializeStatus serialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialize raw enum value from SerialType
      Fw::SerializeStatus deserialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

#if FW_SERIALIZABLE_TO_STRING

      //! Convert enum to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

    public:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The raw enum value
      T e;

  };

}

#endif
