// ======================================================================
// \title  demoTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for demo topology
// ======================================================================

#ifndef demo_demoTopologyAc_HPP
#define demo_demoTopologyAc_HPP

#include "Drv/BlockDriver/BlockDriver.hpp"
#include "Drv/TcpServer/TcpServer.hpp"
#include "Svc/ActiveLogger/ActiveLogger.hpp"
#include "Svc/ActiveRateGroup/ActiveRateGroup.hpp"
#include "Svc/AssertFatalAdapter/AssertFatalAdapter.hpp"
#include "Svc/BufferManager/BufferManager.hpp"
#include "Svc/ChronoTime/ChronoTime.hpp"
#include "Svc/CmdDispatcher/CommandDispatcher.hpp"
#include "Svc/CmdSequencer/CmdSequencer.hpp"
#include "Svc/ComQueue/ComQueue.hpp"
#include "Svc/ComStub/ComStub.hpp"
#include "Svc/Deframer/Deframer.hpp"
#include "Svc/FatalHandler/FatalHandler.hpp"
#include "Svc/FileDownlink/FileDownlink.hpp"
#include "Svc/FileManager/FileManager.hpp"
#include "Svc/FileUplink/FileUplink.hpp"
#include "Svc/Framer/Framer.hpp"
#include "Svc/Health/Health.hpp"
#include "Svc/PassiveConsoleTextLogger/PassiveTextLogger.hpp"
#include "Svc/PrmDb/PrmDb.hpp"
#include "Svc/RateGroupDriver/RateGroupDriver.hpp"
#include "Svc/SystemResources/SystemResources.hpp"
#include "Svc/TlmChan/TlmChan.hpp"
#include "demo/Top/demoTopologyDefs.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace demo {

  //! blockDrv
  extern Drv::BlockDriver blockDrv;

}

namespace demo {

  //! bufferManager
  extern Svc::BufferManager bufferManager;

}

namespace demo {

  //! chronoTime
  extern Svc::ChronoTime chronoTime;

}

namespace demo {

  //! cmdDisp
  extern Svc::CommandDispatcher cmdDisp;

}

namespace demo {

  //! cmdSeq
  extern Svc::CmdSequencer cmdSeq;

}

namespace demo {

  //! comDriver
  extern Drv::TcpServer comDriver;

}

namespace demo {

  //! comQueue
  extern Svc::ComQueue comQueue;

}

namespace demo {

  //! comStub
  extern Svc::ComStub comStub;

}

namespace demo {

  //! deframer
  extern Svc::Deframer deframer;

}

namespace demo {

  //! eventLogger
  extern Svc::ActiveLogger eventLogger;

}

namespace demo {

  //! fatalAdapter
  extern Svc::AssertFatalAdapter fatalAdapter;

}

namespace demo {

  //! fatalHandler
  extern Svc::FatalHandler fatalHandler;

}

namespace demo {

  //! fileDownlink
  extern Svc::FileDownlink fileDownlink;

}

namespace demo {

  //! fileManager
  extern Svc::FileManager fileManager;

}

namespace demo {

  //! fileUplink
  extern Svc::FileUplink fileUplink;

}

namespace demo {

  //! framer
  extern Svc::Framer framer;

}

namespace demo {

  //! health
  extern Svc::Health health;

}

namespace demo {

  //! prmDb
  extern Svc::PrmDb prmDb;

}

namespace demo {

  //! rateGroup1
  extern Svc::ActiveRateGroup rateGroup1;

}

namespace demo {

  //! rateGroup2
  extern Svc::ActiveRateGroup rateGroup2;

}

namespace demo {

  //! rateGroup3
  extern Svc::ActiveRateGroup rateGroup3;

}

namespace demo {

  //! rateGroupDriver
  extern Svc::RateGroupDriver rateGroupDriver;

}

namespace demo {

  //! systemResources
  extern Svc::SystemResources systemResources;

}

namespace demo {

  //! textLogger
  extern Svc::PassiveTextLogger textLogger;

}

namespace demo {

  //! tlmSend
  extern Svc::TlmChan tlmSend;

}

namespace demo {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      demo_blockDrv = 0x100,
      demo_rateGroup1 = 0x200,
      demo_rateGroup2 = 0x300,
      demo_rateGroup3 = 0x400,
      demo_cmdDisp = 0x500,
      demo_cmdSeq = 0x600,
      demo_comQueue = 0x700,
      demo_fileDownlink = 0x800,
      demo_fileManager = 0x900,
      demo_fileUplink = 0xA00,
      demo_eventLogger = 0xB00,
      demo_tlmSend = 0xC00,
      demo_prmDb = 0xD00,
      demo_health = 0x2000,
      demo_comDriver = 0x4000,
      demo_framer = 0x4100,
      demo_fatalAdapter = 0x4200,
      demo_fatalHandler = 0x4300,
      demo_bufferManager = 0x4400,
      demo_chronoTime = 0x4500,
      demo_rateGroupDriver = 0x4600,
      demo_textLogger = 0x4800,
      demo_deframer = 0x4900,
      demo_systemResources = 0x4A00,
      demo_comStub = 0x4B00,
    };
  }

  namespace InstanceIds {
    enum {
      demo_blockDrv,
      demo_bufferManager,
      demo_chronoTime,
      demo_cmdDisp,
      demo_cmdSeq,
      demo_comDriver,
      demo_comQueue,
      demo_comStub,
      demo_deframer,
      demo_eventLogger,
      demo_fatalAdapter,
      demo_fatalHandler,
      demo_fileDownlink,
      demo_fileManager,
      demo_fileUplink,
      demo_framer,
      demo_health,
      demo_prmDb,
      demo_rateGroup1,
      demo_rateGroup2,
      demo_rateGroup3,
      demo_rateGroupDriver,
      demo_systemResources,
      demo_textLogger,
      demo_tlmSend,
    };
  }

  namespace Priorities {
    enum {
      demo_blockDrv = 140,
      demo_cmdDisp = 101,
      demo_cmdSeq = 100,
      demo_comQueue = 100,
      demo_eventLogger = 98,
      demo_fileDownlink = 100,
      demo_fileManager = 100,
      demo_fileUplink = 100,
      demo_prmDb = 96,
      demo_rateGroup1 = 120,
      demo_rateGroup2 = 119,
      demo_rateGroup3 = 118,
      demo_tlmSend = 97,
    };
  }

  namespace QueueSizes {
    enum {
      demo_blockDrv = 10,
      demo_cmdDisp = 20,
      demo_cmdSeq = 10,
      demo_comQueue = 10,
      demo_eventLogger = 10,
      demo_fileDownlink = 30,
      demo_fileManager = 30,
      demo_fileUplink = 30,
      demo_health = 25,
      demo_prmDb = 10,
      demo_rateGroup1 = 10,
      demo_rateGroup2 = 10,
      demo_rateGroup3 = 10,
      demo_tlmSend = 10,
    };
  }

  namespace StackSizes {
    enum {
      demo_blockDrv = 65536,
      demo_cmdDisp = 65536,
      demo_cmdSeq = 65536,
      demo_comQueue = 65536,
      demo_eventLogger = 65536,
      demo_fileDownlink = 65536,
      demo_fileManager = 65536,
      demo_fileUplink = 65536,
      demo_prmDb = 65536,
      demo_rateGroup1 = 65536,
      demo_rateGroup2 = 65536,
      demo_rateGroup3 = 65536,
      demo_tlmSend = 65536,
    };
  }

  namespace TaskIds {
    enum {
      demo_blockDrv,
      demo_cmdDisp,
      demo_cmdSeq,
      demo_comQueue,
      demo_eventLogger,
      demo_fileDownlink,
      demo_fileManager,
      demo_fileUplink,
      demo_prmDb,
      demo_rateGroup1,
      demo_rateGroup2,
      demo_rateGroup3,
      demo_tlmSend,
    };
  }

  // ----------------------------------------------------------------------
  // Component configuration objects
  // ----------------------------------------------------------------------

  namespace ConfigObjects {

    namespace demo_health {
      //!< Number of entries in the pingEntryies array
      constexpr FwSizeType NUM_PING_ENTRIES = 12;
      //!< Ping entry configuration for Svc::Health
      extern Svc::Health::PingEntry pingEntries[NUM_PING_ENTRIES];
    }

  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
