// ======================================================================
// \title  demoTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for demo topology
// ======================================================================

#include "demo/Top/demoTopologyAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace demo {

  Drv::BlockDriver blockDrv(FW_OPTIONAL_NAME("blockDrv"));

}

namespace demo {

  Svc::BufferManager bufferManager(FW_OPTIONAL_NAME("bufferManager"));

}

namespace demo {

  Svc::ChronoTime chronoTime(FW_OPTIONAL_NAME("chronoTime"));

}

namespace demo {

  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));

}

namespace demo {

  Svc::CmdSequencer cmdSeq(FW_OPTIONAL_NAME("cmdSeq"));

}

namespace demo {

  Drv::TcpServer comDriver(FW_OPTIONAL_NAME("comDriver"));

}

namespace demo {

  Svc::ComQueue comQueue(FW_OPTIONAL_NAME("comQueue"));

}

namespace demo {

  Svc::ComStub comStub(FW_OPTIONAL_NAME("comStub"));

}

namespace demo {

  Svc::Deframer deframer(FW_OPTIONAL_NAME("deframer"));

}

namespace demo {

  Svc::ActiveLogger eventLogger(FW_OPTIONAL_NAME("eventLogger"));

}

namespace demo {

  Svc::AssertFatalAdapter fatalAdapter(FW_OPTIONAL_NAME("fatalAdapter"));

}

namespace demo {

  Svc::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));

}

namespace demo {

  Svc::FileDownlink fileDownlink(FW_OPTIONAL_NAME("fileDownlink"));

}

namespace demo {

  Svc::FileManager fileManager(FW_OPTIONAL_NAME("fileManager"));

}

namespace demo {

  Svc::FileUplink fileUplink(FW_OPTIONAL_NAME("fileUplink"));

}

namespace demo {

  Svc::Framer framer(FW_OPTIONAL_NAME("framer"));

}

namespace demo {

  Svc::Health health(FW_OPTIONAL_NAME("health"));

}

namespace demo {

  Svc::PrmDb prmDb(FW_OPTIONAL_NAME("prmDb"));

}

namespace demo {

  Svc::ActiveRateGroup rateGroup1(FW_OPTIONAL_NAME("rateGroup1"));

}

namespace demo {

  Svc::ActiveRateGroup rateGroup2(FW_OPTIONAL_NAME("rateGroup2"));

}

namespace demo {

  Svc::ActiveRateGroup rateGroup3(FW_OPTIONAL_NAME("rateGroup3"));

}

namespace demo {

  Svc::RateGroupDriver rateGroupDriver(FW_OPTIONAL_NAME("rateGroupDriver"));

}

namespace demo {

  Svc::SystemResources systemResources(FW_OPTIONAL_NAME("systemResources"));

}

namespace demo {

  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));

}

namespace demo {

  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));

}

namespace demo {


  // ----------------------------------------------------------------------
  // Component configuration objects
  // ----------------------------------------------------------------------

  namespace ConfigObjects {

    namespace demo_health {
      Svc::Health::PingEntry pingEntries[NUM_PING_ENTRIES] = {
        {
          PingEntries::demo_blockDrv::WARN,
          PingEntries::demo_blockDrv::FATAL,
          "demo_blockDrv"
        },
        {
          PingEntries::demo_cmdDisp::WARN,
          PingEntries::demo_cmdDisp::FATAL,
          "demo_cmdDisp"
        },
        {
          PingEntries::demo_cmdSeq::WARN,
          PingEntries::demo_cmdSeq::FATAL,
          "demo_cmdSeq"
        },
        {
          PingEntries::demo_eventLogger::WARN,
          PingEntries::demo_eventLogger::FATAL,
          "demo_eventLogger"
        },
        {
          PingEntries::demo_fileDownlink::WARN,
          PingEntries::demo_fileDownlink::FATAL,
          "demo_fileDownlink"
        },
        {
          PingEntries::demo_fileManager::WARN,
          PingEntries::demo_fileManager::FATAL,
          "demo_fileManager"
        },
        {
          PingEntries::demo_fileUplink::WARN,
          PingEntries::demo_fileUplink::FATAL,
          "demo_fileUplink"
        },
        {
          PingEntries::demo_prmDb::WARN,
          PingEntries::demo_prmDb::FATAL,
          "demo_prmDb"
        },
        {
          PingEntries::demo_rateGroup1::WARN,
          PingEntries::demo_rateGroup1::FATAL,
          "demo_rateGroup1"
        },
        {
          PingEntries::demo_rateGroup2::WARN,
          PingEntries::demo_rateGroup2::FATAL,
          "demo_rateGroup2"
        },
        {
          PingEntries::demo_rateGroup3::WARN,
          PingEntries::demo_rateGroup3::FATAL,
          "demo_rateGroup3"
        },
        {
          PingEntries::demo_tlmSend::WARN,
          PingEntries::demo_tlmSend::FATAL,
          "demo_tlmSend"
        },
      };
    }

  }


  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    demo::blockDrv.init(QueueSizes::demo_blockDrv, InstanceIds::demo_blockDrv);
    demo::bufferManager.init(InstanceIds::demo_bufferManager);
    demo::chronoTime.init(InstanceIds::demo_chronoTime);
    demo::cmdDisp.init(QueueSizes::demo_cmdDisp, InstanceIds::demo_cmdDisp);
    demo::cmdSeq.init(QueueSizes::demo_cmdSeq, InstanceIds::demo_cmdSeq);
    demo::comDriver.init(InstanceIds::demo_comDriver);
    demo::comQueue.init(QueueSizes::demo_comQueue, InstanceIds::demo_comQueue);
    demo::comStub.init(InstanceIds::demo_comStub);
    demo::deframer.init(InstanceIds::demo_deframer);
    demo::eventLogger.init(QueueSizes::demo_eventLogger, InstanceIds::demo_eventLogger);
    demo::fatalAdapter.init(InstanceIds::demo_fatalAdapter);
    demo::fatalHandler.init(InstanceIds::demo_fatalHandler);
    demo::fileDownlink.init(QueueSizes::demo_fileDownlink, InstanceIds::demo_fileDownlink);
    demo::fileManager.init(QueueSizes::demo_fileManager, InstanceIds::demo_fileManager);
    demo::fileUplink.init(QueueSizes::demo_fileUplink, InstanceIds::demo_fileUplink);
    demo::framer.init(InstanceIds::demo_framer);
    demo::health.init(QueueSizes::demo_health, InstanceIds::demo_health);
    demo::prmDb.init(QueueSizes::demo_prmDb, InstanceIds::demo_prmDb);
    demo::rateGroup1.init(QueueSizes::demo_rateGroup1, InstanceIds::demo_rateGroup1);
    demo::rateGroup2.init(QueueSizes::demo_rateGroup2, InstanceIds::demo_rateGroup2);
    demo::rateGroup3.init(QueueSizes::demo_rateGroup3, InstanceIds::demo_rateGroup3);
    demo::rateGroupDriver.init(InstanceIds::demo_rateGroupDriver);
    demo::systemResources.init(InstanceIds::demo_systemResources);
    demo::textLogger.init(InstanceIds::demo_textLogger);
    demo::tlmSend.init(QueueSizes::demo_tlmSend, InstanceIds::demo_tlmSend);
  }

  void configComponents(const TopologyState& state) {
    // Nothing to do
  }

  void setBaseIds() {
    demo::blockDrv.setIdBase(BaseIds::demo_blockDrv);
    demo::rateGroup1.setIdBase(BaseIds::demo_rateGroup1);
    demo::rateGroup2.setIdBase(BaseIds::demo_rateGroup2);
    demo::rateGroup3.setIdBase(BaseIds::demo_rateGroup3);
    demo::cmdDisp.setIdBase(BaseIds::demo_cmdDisp);
    demo::cmdSeq.setIdBase(BaseIds::demo_cmdSeq);
    demo::comQueue.setIdBase(BaseIds::demo_comQueue);
    demo::fileDownlink.setIdBase(BaseIds::demo_fileDownlink);
    demo::fileManager.setIdBase(BaseIds::demo_fileManager);
    demo::fileUplink.setIdBase(BaseIds::demo_fileUplink);
    demo::eventLogger.setIdBase(BaseIds::demo_eventLogger);
    demo::tlmSend.setIdBase(BaseIds::demo_tlmSend);
    demo::prmDb.setIdBase(BaseIds::demo_prmDb);
    demo::health.setIdBase(BaseIds::demo_health);
    demo::comDriver.setIdBase(BaseIds::demo_comDriver);
    demo::framer.setIdBase(BaseIds::demo_framer);
    demo::fatalAdapter.setIdBase(BaseIds::demo_fatalAdapter);
    demo::fatalHandler.setIdBase(BaseIds::demo_fatalHandler);
    demo::bufferManager.setIdBase(BaseIds::demo_bufferManager);
    demo::chronoTime.setIdBase(BaseIds::demo_chronoTime);
    demo::rateGroupDriver.setIdBase(BaseIds::demo_rateGroupDriver);
    demo::textLogger.setIdBase(BaseIds::demo_textLogger);
    demo::deframer.setIdBase(BaseIds::demo_deframer);
    demo::systemResources.setIdBase(BaseIds::demo_systemResources);
    demo::comStub.setIdBase(BaseIds::demo_comStub);
  }

  void connectComponents() {

    // Command
    demo::cmdDisp.set_compCmdSend_OutputPort(
        0,
        demo::cmdDisp.get_CmdDisp_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        1,
        demo::cmdSeq.get_cmdIn_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        2,
        demo::eventLogger.get_CmdDisp_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        3,
        demo::fileDownlink.get_cmdIn_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        4,
        demo::fileManager.get_cmdIn_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        5,
        demo::health.get_CmdDisp_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        6,
        demo::prmDb.get_CmdDisp_InputPort(0)
    );
    demo::cmdDisp.set_compCmdSend_OutputPort(
        7,
        demo::systemResources.get_CmdDisp_InputPort(0)
    );

    // CommandRegistration
    demo::cmdDisp.set_CmdReg_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(0)
    );
    demo::cmdSeq.set_cmdRegOut_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(1)
    );
    demo::eventLogger.set_CmdReg_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(2)
    );
    demo::fileDownlink.set_cmdRegOut_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(3)
    );
    demo::fileManager.set_cmdRegOut_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(4)
    );
    demo::health.set_CmdReg_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(5)
    );
    demo::prmDb.set_CmdReg_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(6)
    );
    demo::systemResources.set_CmdReg_OutputPort(
        0,
        demo::cmdDisp.get_compCmdReg_InputPort(7)
    );

    // CommandResponse
    demo::cmdDisp.set_CmdStatus_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::cmdSeq.set_cmdResponseOut_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::eventLogger.set_CmdStatus_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::fileDownlink.set_cmdResponseOut_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::fileManager.set_cmdResponseOut_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::health.set_CmdStatus_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::prmDb.set_CmdStatus_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );
    demo::systemResources.set_CmdStatus_OutputPort(
        0,
        demo::cmdDisp.get_compCmdStat_InputPort(0)
    );

    // Downlink
    demo::comDriver.set_deallocate_OutputPort(
        0,
        demo::bufferManager.get_bufferSendIn_InputPort(0)
    );
    demo::comDriver.set_ready_OutputPort(
        0,
        demo::comStub.get_drvConnected_InputPort(0)
    );
    demo::comQueue.set_buffQueueSend_OutputPort(
        0,
        demo::framer.get_bufferIn_InputPort(0)
    );
    demo::comQueue.set_comQueueSend_OutputPort(
        0,
        demo::framer.get_comIn_InputPort(0)
    );
    demo::comStub.set_comStatus_OutputPort(
        0,
        demo::framer.get_comStatusIn_InputPort(0)
    );
    demo::comStub.set_drvDataOut_OutputPort(
        0,
        demo::comDriver.get_send_InputPort(0)
    );
    demo::eventLogger.set_PktSend_OutputPort(
        0,
        demo::comQueue.get_comQueueIn_InputPort(0)
    );
    demo::fileDownlink.set_bufferSendOut_OutputPort(
        0,
        demo::comQueue.get_buffQueueIn_InputPort(0)
    );
    demo::framer.set_bufferDeallocate_OutputPort(
        0,
        demo::fileDownlink.get_bufferReturn_InputPort(0)
    );
    demo::framer.set_comStatusOut_OutputPort(
        0,
        demo::comQueue.get_comStatusIn_InputPort(0)
    );
    demo::framer.set_framedAllocate_OutputPort(
        0,
        demo::bufferManager.get_bufferGetCallee_InputPort(0)
    );
    demo::framer.set_framedOut_OutputPort(
        0,
        demo::comStub.get_comDataIn_InputPort(0)
    );
    demo::tlmSend.set_PktSend_OutputPort(
        0,
        demo::comQueue.get_comQueueIn_InputPort(1)
    );

    // Events
    demo::bufferManager.set_eventOut_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::cmdDisp.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::cmdSeq.set_logOut_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::comQueue.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::eventLogger.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::fatalAdapter.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::fileDownlink.set_eventOut_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::fileManager.set_eventOut_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::fileUplink.set_eventOut_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::health.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::prmDb.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::rateGroup1.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::rateGroup2.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::rateGroup3.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );
    demo::systemResources.set_Log_OutputPort(
        0,
        demo::eventLogger.get_LogRecv_InputPort(0)
    );

    // FaultProtection
    demo::eventLogger.set_FatalAnnounce_OutputPort(
        0,
        demo::fatalHandler.get_FatalReceive_InputPort(0)
    );

    // Health
    demo::blockDrv.set_PingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(0)
    );
    demo::cmdDisp.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(1)
    );
    demo::cmdSeq.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(2)
    );
    demo::eventLogger.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(3)
    );
    demo::fileDownlink.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(4)
    );
    demo::fileManager.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(5)
    );
    demo::fileUplink.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(6)
    );
    demo::health.set_PingSend_OutputPort(
        0,
        demo::blockDrv.get_PingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        1,
        demo::cmdDisp.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        2,
        demo::cmdSeq.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        3,
        demo::eventLogger.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        4,
        demo::fileDownlink.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        5,
        demo::fileManager.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        6,
        demo::fileUplink.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        7,
        demo::prmDb.get_pingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        8,
        demo::rateGroup1.get_PingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        9,
        demo::rateGroup2.get_PingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        10,
        demo::rateGroup3.get_PingIn_InputPort(0)
    );
    demo::health.set_PingSend_OutputPort(
        11,
        demo::tlmSend.get_pingIn_InputPort(0)
    );
    demo::prmDb.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(7)
    );
    demo::rateGroup1.set_PingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(8)
    );
    demo::rateGroup2.set_PingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(9)
    );
    demo::rateGroup3.set_PingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(10)
    );
    demo::tlmSend.set_pingOut_OutputPort(
        0,
        demo::health.get_PingReturn_InputPort(11)
    );

    // RateGroups
    demo::blockDrv.set_CycleOut_OutputPort(
        0,
        demo::rateGroupDriver.get_CycleIn_InputPort(0)
    );
    demo::rateGroup1.set_RateGroupMemberOut_OutputPort(
        0,
        demo::tlmSend.get_Run_InputPort(0)
    );
    demo::rateGroup1.set_RateGroupMemberOut_OutputPort(
        1,
        demo::fileDownlink.get_Run_InputPort(0)
    );
    demo::rateGroup1.set_RateGroupMemberOut_OutputPort(
        2,
        demo::systemResources.get_run_InputPort(0)
    );
    demo::rateGroup2.set_RateGroupMemberOut_OutputPort(
        0,
        demo::cmdSeq.get_schedIn_InputPort(0)
    );
    demo::rateGroup3.set_RateGroupMemberOut_OutputPort(
        0,
        demo::health.get_Run_InputPort(0)
    );
    demo::rateGroup3.set_RateGroupMemberOut_OutputPort(
        1,
        demo::blockDrv.get_Sched_InputPort(0)
    );
    demo::rateGroup3.set_RateGroupMemberOut_OutputPort(
        2,
        demo::bufferManager.get_schedIn_InputPort(0)
    );
    demo::rateGroupDriver.set_CycleOut_OutputPort(
        0,
        demo::rateGroup1.get_CycleIn_InputPort(0)
    );
    demo::rateGroupDriver.set_CycleOut_OutputPort(
        1,
        demo::rateGroup2.get_CycleIn_InputPort(0)
    );
    demo::rateGroupDriver.set_CycleOut_OutputPort(
        2,
        demo::rateGroup3.get_CycleIn_InputPort(0)
    );

    // Sequencer
    demo::cmdDisp.set_seqCmdStatus_OutputPort(
        0,
        demo::cmdSeq.get_cmdResponseIn_InputPort(0)
    );
    demo::cmdSeq.set_comCmdOut_OutputPort(
        0,
        demo::cmdDisp.get_seqCmdBuff_InputPort(0)
    );

    // Telemetry
    demo::blockDrv.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::bufferManager.set_tlmOut_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::cmdDisp.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::cmdSeq.set_tlmOut_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::comQueue.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::fileDownlink.set_tlmOut_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::fileManager.set_tlmOut_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::fileUplink.set_tlmOut_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::health.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::rateGroup1.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::rateGroup2.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::rateGroup3.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );
    demo::systemResources.set_Tlm_OutputPort(
        0,
        demo::tlmSend.get_TlmRecv_InputPort(0)
    );

    // TextEvents
    demo::bufferManager.set_textEventOut_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::cmdDisp.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::cmdSeq.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::comQueue.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::eventLogger.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::fatalAdapter.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::fileDownlink.set_textEventOut_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::fileManager.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::fileUplink.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::health.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::prmDb.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::rateGroup1.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::rateGroup2.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::rateGroup3.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );
    demo::systemResources.set_LogText_OutputPort(
        0,
        demo::textLogger.get_TextLogger_InputPort(0)
    );

    // Time
    demo::blockDrv.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::bufferManager.set_timeCaller_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::cmdDisp.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::cmdSeq.set_timeCaller_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::comQueue.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::eventLogger.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::fatalAdapter.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::fileDownlink.set_timeCaller_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::fileManager.set_timeCaller_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::fileUplink.set_timeCaller_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::health.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::prmDb.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::rateGroup1.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::rateGroup2.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::rateGroup3.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );
    demo::systemResources.set_Time_OutputPort(
        0,
        demo::chronoTime.get_timeGetPort_InputPort(0)
    );

    // Uplink
    demo::cmdDisp.set_seqCmdStatus_OutputPort(
        1,
        demo::deframer.get_cmdResponseIn_InputPort(0)
    );
    demo::comDriver.set_allocate_OutputPort(
        0,
        demo::bufferManager.get_bufferGetCallee_InputPort(0)
    );
    demo::comDriver.set_recv_OutputPort(
        0,
        demo::comStub.get_drvDataIn_InputPort(0)
    );
    demo::comStub.set_comDataOut_OutputPort(
        0,
        demo::deframer.get_framedIn_InputPort(0)
    );
    demo::deframer.set_bufferAllocate_OutputPort(
        0,
        demo::bufferManager.get_bufferGetCallee_InputPort(0)
    );
    demo::deframer.set_bufferDeallocate_OutputPort(
        0,
        demo::bufferManager.get_bufferSendIn_InputPort(0)
    );
    demo::deframer.set_bufferOut_OutputPort(
        0,
        demo::fileUplink.get_bufferSendIn_InputPort(0)
    );
    demo::deframer.set_comOut_OutputPort(
        0,
        demo::cmdDisp.get_seqCmdBuff_InputPort(1)
    );
    demo::deframer.set_framedDeallocate_OutputPort(
        0,
        demo::bufferManager.get_bufferSendIn_InputPort(0)
    );
    demo::fileUplink.set_bufferSendOut_OutputPort(
        0,
        demo::bufferManager.get_bufferSendIn_InputPort(0)
    );
  }

  void regCommands() {
    demo::cmdDisp.regCommands();
    demo::cmdSeq.regCommands();
    demo::eventLogger.regCommands();
    demo::fileDownlink.regCommands();
    demo::fileManager.regCommands();
    demo::health.regCommands();
    demo::prmDb.regCommands();
    demo::systemResources.regCommands();
  }

  void readParameters() {
    // Nothing to do
  }

  void loadParameters() {
    // Nothing to do
  }

  void startTasks(const TopologyState& state) {
    demo::blockDrv.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_blockDrv),
      static_cast<Os::Task::ParamType>(StackSizes::demo_blockDrv),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_blockDrv)
    );
    demo::cmdDisp.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_cmdDisp),
      static_cast<Os::Task::ParamType>(StackSizes::demo_cmdDisp),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_cmdDisp)
    );
    demo::cmdSeq.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_cmdSeq),
      static_cast<Os::Task::ParamType>(StackSizes::demo_cmdSeq),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_cmdSeq)
    );
    demo::comQueue.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_comQueue),
      static_cast<Os::Task::ParamType>(StackSizes::demo_comQueue),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_comQueue)
    );
    demo::eventLogger.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_eventLogger),
      static_cast<Os::Task::ParamType>(StackSizes::demo_eventLogger),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_eventLogger)
    );
    demo::fileDownlink.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_fileDownlink),
      static_cast<Os::Task::ParamType>(StackSizes::demo_fileDownlink),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_fileDownlink)
    );
    demo::fileManager.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_fileManager),
      static_cast<Os::Task::ParamType>(StackSizes::demo_fileManager),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_fileManager)
    );
    demo::fileUplink.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_fileUplink),
      static_cast<Os::Task::ParamType>(StackSizes::demo_fileUplink),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_fileUplink)
    );
    demo::prmDb.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_prmDb),
      static_cast<Os::Task::ParamType>(StackSizes::demo_prmDb),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_prmDb)
    );
    demo::rateGroup1.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_rateGroup1),
      static_cast<Os::Task::ParamType>(StackSizes::demo_rateGroup1),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_rateGroup1)
    );
    demo::rateGroup2.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_rateGroup2),
      static_cast<Os::Task::ParamType>(StackSizes::demo_rateGroup2),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_rateGroup2)
    );
    demo::rateGroup3.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_rateGroup3),
      static_cast<Os::Task::ParamType>(StackSizes::demo_rateGroup3),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_rateGroup3)
    );
    demo::tlmSend.start(
      static_cast<Os::Task::ParamType>(Priorities::demo_tlmSend),
      static_cast<Os::Task::ParamType>(StackSizes::demo_tlmSend),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::demo_tlmSend)
    );
  }

  void stopTasks(const TopologyState& state) {
    demo::blockDrv.exit();
    demo::cmdDisp.exit();
    demo::cmdSeq.exit();
    demo::comQueue.exit();
    demo::eventLogger.exit();
    demo::fileDownlink.exit();
    demo::fileManager.exit();
    demo::fileUplink.exit();
    demo::prmDb.exit();
    demo::rateGroup1.exit();
    demo::rateGroup2.exit();
    demo::rateGroup3.exit();
    demo::tlmSend.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) demo::blockDrv.ActiveComponentBase::join();
    (void) demo::cmdDisp.ActiveComponentBase::join();
    (void) demo::cmdSeq.ActiveComponentBase::join();
    (void) demo::comQueue.ActiveComponentBase::join();
    (void) demo::eventLogger.ActiveComponentBase::join();
    (void) demo::fileDownlink.ActiveComponentBase::join();
    (void) demo::fileManager.ActiveComponentBase::join();
    (void) demo::fileUplink.ActiveComponentBase::join();
    (void) demo::prmDb.ActiveComponentBase::join();
    (void) demo::rateGroup1.ActiveComponentBase::join();
    (void) demo::rateGroup2.ActiveComponentBase::join();
    (void) demo::rateGroup3.ActiveComponentBase::join();
    (void) demo::tlmSend.ActiveComponentBase::join();
  }

  void tearDownComponents(const TopologyState& state) {
    // Nothing to do
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
