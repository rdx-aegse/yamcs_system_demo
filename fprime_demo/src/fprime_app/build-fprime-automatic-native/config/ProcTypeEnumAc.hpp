// ======================================================================
// \title  ProcTypeEnumAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ProcType enum
// ======================================================================

#ifndef Fw_DpCfg_ProcTypeEnumAc_HPP
#define Fw_DpCfg_ProcTypeEnumAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Fw {

  namespace DpCfg {

    //! A bit mask for selecting the type of processing to perform on
    //! a container before writing it to disk.
    class ProcType :
      public Fw::Serializable
    {

      public:

        // ----------------------------------------------------------------------
        // Types
        // ----------------------------------------------------------------------

        //! The serial representation type
        typedef U8 SerialType;

        //! The raw enum type
        enum T {
          //! Processing type 0
          PROC_TYPE_ZERO = 1,
          //! Processing type 1
          PROC_TYPE_ONE = 2,
          //! Processing type 2
          PROC_TYPE_TWO = 4,
        };

        //! For backwards compatibility
        typedef T t;

      public:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        enum {
          //! The size of the serial representation
          SERIALIZED_SIZE = sizeof(SerialType),
          //! The number of enumerated constants
          NUM_CONSTANTS = 3,
        };

      public:

        // ----------------------------------------------------------------------
        // Constructors
        // ----------------------------------------------------------------------

        //! Constructor (default value of PROC_TYPE_ZERO)
        ProcType()
        {
          this->e = PROC_TYPE_ZERO;
        }

        //! Constructor (user-provided value)
        ProcType(
            const T e1 //!< The raw enum value
        )
        {
          this->e = e1;
        }

        //! Copy constructor
        ProcType(
            const ProcType& obj //!< The source object
        )
        {
          this->e = obj.e;
        }

      public:

        // ----------------------------------------------------------------------
        // Operators
        // ----------------------------------------------------------------------

        //! Copy assignment operator (object)
        ProcType& operator=(
            const ProcType& obj //!< The source object
        );

        //! Copy assignment operator (raw enum)
        ProcType& operator=(
            T e1 //!< The enum value
        );

        //! Conversion operator
        operator T() const
        {
          return this->e;
        }

        //! Equality operator
        bool operator==(T e1) const
        {
          return this->e == e1;
        }

        //! Inequality operator
        bool operator!=(T e1) const
        {
          return !(*this == e1);
        }

#ifdef BUILD_UT

        //! Ostream operator
        friend std::ostream& operator<<(
            std::ostream& os, //!< The ostream
            const ProcType& obj //!< The object
        );

#endif

      public:

        // ----------------------------------------------------------------------
        // Member functions
        // ----------------------------------------------------------------------

        //! Check raw enum value for validity
        bool isValid() const;

        //! Serialize raw enum value to SerialType
        Fw::SerializeStatus serialize(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;

        //! Deserialize raw enum value from SerialType
        Fw::SerializeStatus deserialize(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        );

#if FW_SERIALIZABLE_TO_STRING

        //! Convert enum to string
        void toString(
            Fw::StringBase& sb //!< The StringBase object to hold the result
        ) const;

#endif

      public:

        // ----------------------------------------------------------------------
        // Member variables
        // ----------------------------------------------------------------------

        //! The raw enum value
        T e;

    };

  }

}

#endif
