// ======================================================================
// \title  VersionEnumEnumAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for VersionEnum enum
// ======================================================================

#include <cstring>
#include <limits>

#include "Fw/Types/Assert.hpp"
#include "config/VersionEnumEnumAc.hpp"

namespace Svc {

  namespace VersionCfg {

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    VersionEnum& VersionEnum ::
      operator=(const VersionEnum& obj)
    {
      this->e = obj.e;
      return *this;
    }

    VersionEnum& VersionEnum ::
      operator=(T e1)
    {
      this->e = e1;
      return *this;
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const VersionEnum& obj) {
      Fw::String s;
      obj.toString(s);
      os << s;
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    bool VersionEnum ::
      isValid() const
    {
      return ((e >= PROJECT_VERSION_00) && (e <= PROJECT_VERSION_09));
    }

    Fw::SerializeStatus VersionEnum ::
      serialize(Fw::SerializeBufferBase& buffer) const
    {
      const Fw::SerializeStatus status = buffer.serialize(
          static_cast<SerialType>(this->e)
      );
      return status;
    }

    Fw::SerializeStatus VersionEnum ::
      deserialize(Fw::SerializeBufferBase& buffer)
    {
      SerialType es;
      Fw::SerializeStatus status = buffer.deserialize(es);
      if (status == Fw::FW_SERIALIZE_OK) {
        this->e = static_cast<T>(es);
        if (!this->isValid()) {
          status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
        }
      }
      return status;
    }

#if FW_SERIALIZABLE_TO_STRING

    void VersionEnum ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String s;
      switch (e) {
        case PROJECT_VERSION_00:
          s = "PROJECT_VERSION_00";
          break;
        case PROJECT_VERSION_01:
          s = "PROJECT_VERSION_01";
          break;
        case PROJECT_VERSION_02:
          s = "PROJECT_VERSION_02";
          break;
        case PROJECT_VERSION_03:
          s = "PROJECT_VERSION_03";
          break;
        case PROJECT_VERSION_04:
          s = "PROJECT_VERSION_04";
          break;
        case PROJECT_VERSION_05:
          s = "PROJECT_VERSION_05";
          break;
        case PROJECT_VERSION_06:
          s = "PROJECT_VERSION_06";
          break;
        case PROJECT_VERSION_07:
          s = "PROJECT_VERSION_07";
          break;
        case PROJECT_VERSION_08:
          s = "PROJECT_VERSION_08";
          break;
        case PROJECT_VERSION_09:
          s = "PROJECT_VERSION_09";
          break;
        default:
          s = "[invalid]";
          break;
      }
      sb.format("%s (%" PRIu32 ")", s.toChar(), e);
    }

#elif FW_ENABLE_TEXT_LOGGING

    void VersionEnum ::
      toString(Fw::StringBase& sb) const
    {
      sb.format("%" PRIu32 "", e);
    }

#endif

  }

}
