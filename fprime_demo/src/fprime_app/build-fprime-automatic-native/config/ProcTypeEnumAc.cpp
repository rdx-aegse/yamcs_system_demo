// ======================================================================
// \title  ProcTypeEnumAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ProcType enum
// ======================================================================

#include <cstring>
#include <limits>

#include "Fw/Types/Assert.hpp"
#include "config/ProcTypeEnumAc.hpp"

namespace Fw {

  namespace DpCfg {

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    ProcType& ProcType ::
      operator=(const ProcType& obj)
    {
      this->e = obj.e;
      return *this;
    }

    ProcType& ProcType ::
      operator=(T e1)
    {
      this->e = e1;
      return *this;
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const ProcType& obj) {
      Fw::String s;
      obj.toString(s);
      os << s;
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    bool ProcType ::
      isValid() const
    {
      return ((e >= PROC_TYPE_ZERO) && (e <= PROC_TYPE_ONE))
        || ((e >= PROC_TYPE_TWO) && (e <= PROC_TYPE_TWO));
    }

    Fw::SerializeStatus ProcType ::
      serialize(Fw::SerializeBufferBase& buffer) const
    {
      const Fw::SerializeStatus status = buffer.serialize(
          static_cast<SerialType>(this->e)
      );
      return status;
    }

    Fw::SerializeStatus ProcType ::
      deserialize(Fw::SerializeBufferBase& buffer)
    {
      SerialType es;
      Fw::SerializeStatus status = buffer.deserialize(es);
      if (status == Fw::FW_SERIALIZE_OK) {
        this->e = static_cast<T>(es);
        if (!this->isValid()) {
          status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
        }
      }
      return status;
    }

#if FW_SERIALIZABLE_TO_STRING

    void ProcType ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String s;
      switch (e) {
        case PROC_TYPE_ZERO:
          s = "PROC_TYPE_ZERO";
          break;
        case PROC_TYPE_ONE:
          s = "PROC_TYPE_ONE";
          break;
        case PROC_TYPE_TWO:
          s = "PROC_TYPE_TWO";
          break;
        default:
          s = "[invalid]";
          break;
      }
      sb.format("%s (%" PRIu8 ")", s.toChar(), e);
    }

#elif FW_ENABLE_TEXT_LOGGING

    void ProcType ::
      toString(Fw::StringBase& sb) const
    {
      sb.format("%" PRIu8 "", e);
    }

#endif

  }

}
