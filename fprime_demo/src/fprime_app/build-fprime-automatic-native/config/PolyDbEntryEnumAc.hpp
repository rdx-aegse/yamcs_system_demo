// ======================================================================
// \title  PolyDbEntryEnumAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for PolyDbEntry enum
// ======================================================================

#ifndef Svc_PolyDbCfg_PolyDbEntryEnumAc_HPP
#define Svc_PolyDbCfg_PolyDbEntryEnumAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Svc {

  namespace PolyDbCfg {

    //! Define a set of PolyDb entries on a project-specific
    //! basis.
    class PolyDbEntry :
      public Fw::Serializable
    {

      public:

        // ----------------------------------------------------------------------
        // Types
        // ----------------------------------------------------------------------

        //! The serial representation type
        typedef U32 SerialType;

        //! The raw enum type
        enum T {
          //! Entry 0
          POLYDB_ENTRY_00 = 0,
          //! Entry 1
          POLYDB_ENTRY_01 = 1,
          //! Entry 2
          POLYDB_ENTRY_03 = 2,
          //! Entry 4
          POLYDB_ENTRY_04 = 3,
          //! Entry 5
          POLYDB_ENTRY_05 = 4,
          //! Entry 6
          POLYDB_ENTRY_06 = 5,
          //! Entry 7
          POLYDB_ENTRY_07 = 6,
          //! Entry 8
          POLYDB_ENTRY_08 = 7,
          //! Entry 9
          POLYDB_ENTRY_09 = 8,
        };

        //! For backwards compatibility
        typedef T t;

      public:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        enum {
          //! The size of the serial representation
          SERIALIZED_SIZE = sizeof(SerialType),
          //! The number of enumerated constants
          NUM_CONSTANTS = 9,
        };

      public:

        // ----------------------------------------------------------------------
        // Constructors
        // ----------------------------------------------------------------------

        //! Constructor (default value of POLYDB_ENTRY_00)
        PolyDbEntry()
        {
          this->e = POLYDB_ENTRY_00;
        }

        //! Constructor (user-provided value)
        PolyDbEntry(
            const T e1 //!< The raw enum value
        )
        {
          this->e = e1;
        }

        //! Copy constructor
        PolyDbEntry(
            const PolyDbEntry& obj //!< The source object
        )
        {
          this->e = obj.e;
        }

      public:

        // ----------------------------------------------------------------------
        // Operators
        // ----------------------------------------------------------------------

        //! Copy assignment operator (object)
        PolyDbEntry& operator=(
            const PolyDbEntry& obj //!< The source object
        );

        //! Copy assignment operator (raw enum)
        PolyDbEntry& operator=(
            T e1 //!< The enum value
        );

        //! Conversion operator
        operator T() const
        {
          return this->e;
        }

        //! Equality operator
        bool operator==(T e1) const
        {
          return this->e == e1;
        }

        //! Inequality operator
        bool operator!=(T e1) const
        {
          return !(*this == e1);
        }

#ifdef BUILD_UT

        //! Ostream operator
        friend std::ostream& operator<<(
            std::ostream& os, //!< The ostream
            const PolyDbEntry& obj //!< The object
        );

#endif

      public:

        // ----------------------------------------------------------------------
        // Member functions
        // ----------------------------------------------------------------------

        //! Check raw enum value for validity
        bool isValid() const;

        //! Serialize raw enum value to SerialType
        Fw::SerializeStatus serialize(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;

        //! Deserialize raw enum value from SerialType
        Fw::SerializeStatus deserialize(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        );

#if FW_SERIALIZABLE_TO_STRING

        //! Convert enum to string
        void toString(
            Fw::StringBase& sb //!< The StringBase object to hold the result
        ) const;

#endif

      public:

        // ----------------------------------------------------------------------
        // Member variables
        // ----------------------------------------------------------------------

        //! The raw enum value
        T e;

    };

  }

}

#endif
